<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[常用数据结构与算法时间复杂度求解]]></title>
      <url>%2F2018%2F09%2F14%2Fchangyongshujujiegouyusuanfashijianfuzaduqiujie%2F</url>
      <content type="text"><![CDATA[1.0 数据结构的相关概念 2.0 一些基本算法的时间复杂度O(1)： int x=1; O(n)： for(int i = 0; i &lt; n; i++){ printf(&quot;%d&quot;,i); } O(log2n)： int n = 8,count = 0; for(int i = 1; i &lt;= n; i*=2){ count++; } O(n2)： int n = 8,count = 0; for(int i = 1; i &lt;= n; i++){ for(int j = 1; j &lt;= n; j++){ count++; } } O(nlog2n)： int n = 8,count = 0; for(int i = 1; i &lt;= n; i*=2){ for(int j = 1; j &lt;= n; j++){ count++; } } 2.1 求解时间复杂度的基本步骤（1）找出算法中的基本语句：算法中执行次数最多的，通常是内层循环的循环体； （2）计算基本语句的执行次数的数量级； （3）用大O记号表示算法的时间性能，将基本语句执行次数的数量级放入大O记号中。 2.1.0 例题解析eg1： #include &lt;stdio.h&gt; int main(){ int i, j, x = 0, sum = 0, n = 100; //执行了1次 for( i = 1; i &lt;= n; i++){ //执行了n+1次 sum = sum +i; //执行了n次 for(j = 1; j &lt;= n; j++){ //执行了n*(n+1)次 x++; //执行了n*n次 sum =sum + x; //执行了n*n次 } } printf(&quot;%d&quot;,sum); //执行了1次 } 很显然，一共执行了 1+(n+1)+n+n(n+1)+ n n +n*n =3n2 +3n +2次，去掉常数，保留最高阶，化最高阶系数为1，得到数量级O（n2)。即时间复杂度为：T（n）=O（n2）。 eg2：计算 1+2+3+4+······+100 #include &lt;stdio.h&gt; int main(){ int i , sum = 0,n = 100; //执行了1次 for(i = 1; i &lt;= n; i++){ //执行了n+1次 sum +=i; //执行了n次 } printf(&quot;%d&quot;,sum); //执行了1次 } 显然的，算法所用时间（语句执行频度）为：1+n+1+n+1 = 2n+3次，故时间复杂度为：O（n）。 eg3：计算 1+2+3+4+······+100 （高斯算法） #include &lt;stdio.h&gt; int main(){ int sum = 0, n = 100; //执行了1次 sum =(1+n)*n/2; //执行了1次 printf(&quot;%d&quot;,sum); //执行了1次 } 时间复杂度为：O（3），记为O（1）。 eg4： 求两个n阶方阵C=A * B的乘积，算法如下 void MatrixMultiply(int A[n][n], int B[n][n], int C[n][n]){ for(int i = 0; i &lt; n; i++){ //执行了n+1次 for(j = 0; j &lt; n; j++){ //执行了n*(n+1)次 C[i][j] = 0; //执行了n^2^次 for(k = 0; k &lt; n; k++){ //执行了n^2^*(n+1)次 C[i][j] = C[i][j] + A[i][k] *B[k][j]; //执行了n^3^次 } } } } 则T（n）=2n3+3n2+2n+1，故时间复杂度为O（n3）。 eg5： void test(int n){ i = 1,k = 100; while(i &lt; n){ k = k+1; i = i+2; } } 求解步骤： 假设循环体执行了T（n）次， 当循环体（i=i+2）执行了1次时，i = 1 + 2; 当循环体（i=i+2）执行了2次时，i = 2 + 2; 以此类推，很显然，i =2T(n) +1，又循环条件为 i &lt; n， 即 2T(n) +1 &lt;= n-1，解得T(n) &lt;= n/2 -1，故时间复杂度为O(n)。 2.1.1 常见时间复杂及其效率高低比较（由高到低）O(1) &gt; O(logn) &gt; O(n) &gt; O(nlogn) &gt; O(n2) > O(n3) > O(2n) > O(n!) &gt; O(nn)。如果你设计的算法时间复杂度为O(2n)以后的，那么你必须修改你的算法了。很显然，常数阶（O(1)）效率最高，比如高斯算法。 3.0 总结数据结构与算法是计算机专业必修课程，也是计算机专业考研的重点，必须学好。紫罗兰 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[海洋CMS与苹果CMS使用206dy采集图片无法显示]]></title>
      <url>%2F2018%2F09%2F08%2Fhaiyangcmsyupingguocmsshiyong206dycaijitupianwufaxianshi%2F</url>
      <content type="text"><![CDATA[当我们利用各个视频CMS搭建好视频网站后，经常面临各种Bug。下面就来讲讲采集图片无法显示的问题与解决办法。 海洋cms官方也提供了一些参考，如下： 方法1： 检查是否引入了 jquery.min.js 和 LazyLoad.js 检查网站源码底部是否引入了执行懒加载的js代码： $(function() { $(“.videopic.lazy”).lazyload({effect: “fadeIn”}); $(“[data-toggle=’tooltip’]“).tooltip(); }); 方法2： 检查统计代码，网站介绍等标签内容是否超长，导致js代码被截断。如果js代码被阶段，则js全部无法继续执行。 方法3： 修改模板里的代码，将 style=”background: url(images/load.gif) 修改为： style=”background:url([videolist:pic]) 在此，特针对使用206dy采集与解析的网站，提供如下方法，前往 下载 tu.php 文件。下载好以后，将tu.php 文件放置到网站根目录下。问题即可解决。 看最新电影，请前往 紫罗兰影视 。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS-display 属性——网页布局绕不开的坎]]></title>
      <url>%2F2018%2F09%2F07%2Fcss-display-shuxingwangyebujuraobukaidekan%2F</url>
      <content type="text"><![CDATA[如果不对html中的内容进行布局，也就是排版，那么所有的内容将堆砌在一起，严重影响阅读。 说到网页布局，不得不谈css的display属性。 display属性dispaly是css中非常重要的控制布局的属性。每一个html元素都具有该属性。该属性决定了每一个元素的在网页中将如何呈现。通常大多数的元素默认display的值为block或inline。 div { display: block; } blockdisplay值为block的元素我们称之为块级元素。最常见的块级元素有 div。其他还有 p 、form、header、footer 等元素。 块级元素最显著的特征：独占一行，尽可能撑满容器。表现为另起一行开始，而且其后的元素也必须另起一行显示。 inlineinline元素我们称之为行内元素。标准的行内元素有 span 元素， a 元素也是常用的行内元素。 一个行内元素可以在段落中包裹一些文字而不会打乱段落的布局。即可以和其他行内元素位于同一行。 none另一个常用的display值是 none 。一些特殊元素的默认 display 值是它，例如 script 。 display:none 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。 document.getElementById(&quot;id_name&quot;).style.dispaly = &quot;none&quot;; 它和 visibility 属性不一样。两者都能隐藏元素。把 display 设置成 none 元素不会占据它本来应该显示的空间。但是设置成 visibility: hidden; 元素还会占据空间。 值得一提的是，虽然每个元素都有其默认的display属性值，我们依然可以通过css修改其display属性值，比如将 block 修改为 inline，以获取我们需要的布局效果。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[告别冲视频会员，享受free观影]]></title>
      <url>%2F2018%2F09%2F06%2Fgaobiechongshipinhuiyuanxiangshoufreeguanying%2F</url>
      <content type="text"><![CDATA[今天给大家介绍一个免费观看各大视频网站VIP视频的方法。 首先，大家在浏览器输入 v.originspace.cn ，进入 你好吗解析站。 然后，前往各大视频网站，找到你想看的视频，将其网址复制。 接着，将复制的网址粘贴到 你好吗解析站 【请粘贴视频网址】处。 更多详细操作，请看图片，或咨询站长。 你好吗解析VIP会员视频免费看 你好吗解析是一个VIP视频解析站，采用抓包技术、解密技术等，可以让你免费看各大视频网站会员VIP视频，让你告别不必要的花钱。 支持视频网站：优酷、土豆、爱奇艺、腾讯视频、搜狐视频、乐视、芒果、PPTV等]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[网页的“装修工”——CSS]]></title>
      <url>%2F2018%2F09%2F01%2Fwangyedezhuangxiugongcss%2F</url>
      <content type="text"><![CDATA[什么是CSS？CSS，即 Cascading Style Sheet 的首字母缩写，中文名叫层叠样式表。它与HTML一样，是一种描述性语言。 CSS有什么作用？CSS定义了如何显示HTML标签、如何控制网页对象的样式，如何进行页面排版。简单来讲，CSS使我们看到的网页显得更加美观、更加适合我们阅读。 如何使用CSS？ 1、内嵌样式 即将CSS代码写在&lt;head&gt;&lt;/head&gt;之间，通过HTML的&lt;style&gt;标签括起来。使用方法如下： 我是标题 p { text-align = center; font-size = 18px; line-height = 20px; } 2、行内样式 即将CSS代码直接写在HTML标签中，一般放在标签的style属性里。使用方法如下： 我是块级元素，控制一大块区域。 我是行内元素，控制段落。 3、外部样式 即将CSS代码写在一个以 .css 为后缀的文件中，通过HTML的&lt;link&gt;标签，将该CSS文件链接到HTML文档中。这是最实用、最常用的方式。这种方式实现了结构层和表示层的彻底分离，有助于维护网页。使用方法如下： 一个实例——简单的404页面&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;页面开小差啦&lt;/title&gt; &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;./images/favicon.ico&quot;&gt; &lt;style&gt; *{margin: 0;padding: 0;border: 0;} body{margin: 0 auto;} .logo{margin: 0 auto;padding: 0;border: 0; width: 500px;margin-top: 80px; height: 120px;} img{margin: 0;padding: 0;border: 0;float: left; width: 120px;} .logo p{margin: 0;padding: 0;border: 0;margin-left: 20px;margin-right: 0; float:right;width: 360px;font-size: 2em;line-height: 120px;} .main{margin-top: 80px;margin-left:auto;margin-right: auto;width: 500px; text-align: center;line-height: 2em;} .main p a{text-decoration: none;color: #ffae00;font-size: 1.25em;font-weight: 700;background-color: black;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;logo&quot;&gt;&lt;img src=&quot;images/logo_s.png&quot; alt=&quot;ORIGINSPACE|本源空间&quot;&gt;&lt;p&gt;ORIGIN&lt;span style=&quot;color: #ffae00;&quot;&gt;SPACE&lt;/span&gt;|本源空间&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;main&quot;&gt; &lt;p style=&quot;color: orange;font-size: 1.85em;font-weight: 700;&quot;&gt;提醒：&lt;/p&gt; &lt;p style=&quot;color: white;font-size: 1.025em;background-color: black;&quot;&gt;啊哈！页面找不到啦，看看是不是网址输错啦！&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://originspace.cn/&quot;&gt;点击这里重新回到小站首页&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 其在浏览器中显示如下：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[网页的”骨架“——HTML]]></title>
      <url>%2F2018%2F08%2F31%2Fwangyedegujiahtml%2F</url>
      <content type="text"><![CDATA[网页的构成一个网页简单来讲，由三部分组成。 HTML——组织网页的结构 CSS——对网页结构进行装修美化 JavaScript——增强网页的交互性，实现数据的实时更新等 所谓交互，即人与一个网页的交流过程。可能是点击某个按钮，可能是注册、登录、修改密码，也可能是网页聊天，等等。 HTMLHTML，英文全称 Hyper Text Markup Language，超文本标记语言。 一个HTML文件（称之为HTML文档）主要包含HTML元素及其属性。这里我们探讨的是HTML5（目前最新的HTML标准）。 HTML5文档基本结构&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;我是一个html页面&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 我是主体，你们在浏览器上看到的内容都放在我这里。 &lt;/body&gt; &lt;/html&gt; ​ &lt;!DOCTYPE html&gt; 文档类型声明，声明这是html5文档，这一方面告诉开发者要使用html5语法规范进行开发，一方面告诉浏览器使用html5规范解析展示页面给人们看。 &lt;html&gt; ··· &lt;/html&gt; 主骨架，其他骨架都在这里面搭。 &lt;head&gt; ··· &lt;/head&gt; &lt;body&gt; ··· &lt;/body&gt; 两个分骨架。head分骨架包含元数据，主要给浏览器看。body骨架包含我们在浏览器上看到的内容。 HTML元素html文档中的内容，开发人员一般称之为元素。 我们说，除了文档类型声明，其他所有的元素都需要包含在html标签里。 什么是标签？&lt;html&gt;&lt;/html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; ​ 如上，用一对尖括号 &lt;\&gt; 括起来的称之为标签。 元素 = 标签+标签里包含的内容。如下： &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 我是HTML文档的主体，你们在网页上看到的内容，都放在我这里。 &lt;/body&gt; &lt;/html&gt; html元素由和其里面的内容组成。 常用标签&lt;div&gt;&lt;/div&gt; &lt;span&gt;&lt;/span&gt; &lt;p&gt;&lt;/p&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt; &lt;ul&gt;&lt;/ul&gt; &lt;li&gt;&lt;/li&gt; &lt;h1&gt;&lt;/h1&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h4&gt;&lt;/h4&gt; &lt;h5&gt;&lt;/h5&gt; &lt;h6&gt;&lt;/h6&gt; &lt;hr&gt; &lt;br&gt; ​ 元素的属性元素的属性用来定义元素的类型、功能、方法等。 大部分元素拥有的属性（核心属性）： class——定义类规则 id——定义元素的唯一标识 style——定义元素的样式声明 以上三个属性一般是在CSS和JS中用到。 其他还有语言属性、键盘属性、内容属性、表单属性等。 一个简单的HTML5页面示例&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;我是一个html页面&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h3&gt;我是3号标题&lt;/h3&gt; &lt;p&gt;我是一个段落，文本内容一般放在我这里面。&lt;br&gt; &lt;a href=&quot;https://linjianming.com/&quot;&gt;我是超链接，你可以点击我&lt;/a&gt;&lt;/p&gt; &lt;!-- &lt;br&gt;是换行标签 --&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; ​ ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python JSON模块的用法简单剖析]]></title>
      <url>%2F2018%2F08%2F29%2Fjson%2F</url>
      <content type="text"><![CDATA[什么是 JSON ？ JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）。 JSON 是轻量级的文本数据交换格式。是用来存储和交换文本信息的语法。 JSON 语法语法规则JSON 语法是 JavaScript 对象表示语法的子集。 数据在名称/值对中 数据由逗号分隔 大括号保存对象 中括号保存数组 1234567&#123; "sites": [ &#123; "name":"随心而码" , "url":"linjianming.com" &#125;, &#123; "name":"清风云" , "url":"yun.silent-tech.cn" &#125;, &#123; "name":"本源空间" , "url":"originspace.cn" &#125; ]&#125; “name”:”随心而码” , “url”:”linjianming.com” 叫作JSON 对象，他们一般放在 {} 中。 “sites” 为JSON 数组，用 [] 表示。 Python中的json模块json，用于字符串 和 python数据类型间进行转换json模块提供了四个功能：dumps、dump、loads、load 用法 json.dumps 将 Python 对象编码成 JSON 数据 json.dump 将 JSON 数据通过特殊的形式转换为只有 Python 认识的字符串并写入文件 json.loads 将已编码的 JSON 数据解码为 Python 对象 json.load 将一个包含 JSON 格式数据的可读文件解码为一个 Python 对象并写入文件 import json date = { "sites": [ { "name":"随心而码" , "url":"linjianming.com" }, { "name":"清风云" , "url":"yun.silent-tech.cn" }, { "name":"本源空间" , "url":"originspace.cn" } ] } str1 = json.dumps(date) # json.dumps 将数据通过特殊形式转换为所有程序语言都认识的字符串 print(str1) with open('result.json','w') as fp: #json.dump 将数据通过特殊的形式转换为只有python认识的字符串并写入文件 json.dump(date,fp) 在此提醒：命名你的Python文件时，千万不要使用和Python保留的标识符冲突。如，不可将你的文件命名为 json.py ，这与Python系统模块 json 命名冲突。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[9月将至，2019考研er必须要关注的几个时间点]]></title>
      <url>%2F2018%2F08%2F27%2F9yuejiangzhi2019kaoyanerbixuyaoguanzhudejigeshijiandian%2F</url>
      <content type="text"><![CDATA[考研人必须要了解清楚的几个重要时间点。 8月下旬—9月中下旬全国各研招机构根据2019年全国硕士研究生入学考试招生简章公布本机构招生简章与专业目录。 教育部及各研招机构陆续发行《2019年全国硕士研究生入学考试大纲》、学科及专业课考试大纲(一般参考时间，会有微调)。 考生应该做什么： 收集院校和专业信息，明确院校招生要求以及专业课考试范围和书目。吃透大纲与大纲解析。 9月中旬—10月中旬全国硕士研究生入学考试网上预报名与正式报名。 预报名时间为2018年9月24日至9月27日，每天9:00-22:00。 正式报名时间为2018年10月10日至10月31日，每天9:00-22:00。 报名网址：中国研究生招生信息网，公网网址https://yz.chsi.com.cn，教育网址https://yz.chsi.cn 报名时，一定要按要求填写正确的信息。 11月现场确认网上报名信息。考生需到网上报名选择的考点进行现场信息确认和图像采集。 12月在中国研究生招生信息网打印考试准考证。 2018年12月14日至12月24日，考生可凭网报用户名和密码登录“研招网”自行下载打印《准考证》。《准考证》使用A4幅面白纸打印，正、反两面在使用期间不得涂改或书写。考生凭下载打印的《准考证》及居民身份证参加初试和复试。 初试时间 2018年12月22日至12月23日(每天上午8:30-11:30，下午14:00-17:00)。超过3小时的考试科目在12月24日进行(起始时间8:30，截止时间由招生单位确定，不超过14:30)。 初试科目 初试方式均为笔试。 12月22日上午 思想政治理论、管理类联考综合能力 12月22日下午 外国语 12月23日上午 业务课一 12月23日下午 业务课二 12月24日 考试时间超过3小时的考试科目 每科考试时间一般为3小时;建筑设计等特殊科目考试时间最长不超过6小时。 1月对自己有把握的考生，应开始准备复试。 2月各研招机构陆续公布考试成绩，考生自行登录研招网或者报考院校考生网站进行查询。 3月—5月国家线和研招机构分数线陆续公布。 上线的考生加强复试复习。 各研招机构陆续开始复试。 研招网调剂系统将开放，考生自行选择调剂。 公布拟录取名单，考生进行体检政审等。 6月将收到录取通知书，准备进入学校深造。 在此，预祝考研er们金榜题名，高中状元。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2019考研报名条件]]></title>
      <url>%2F2018%2F08%2F27%2F2019kaoyanbaomingtiaojian%2F</url>
      <content type="text"><![CDATA[​ 在百万考研学子们的翘首以盼中，2019考研报名的日子来临啦！ 按照教育部公布的《2019年全国硕士研究生招生工作管理规定》，9月24日，考研预报名就要开始了！ 总体要求报名参加全国硕士研究生招生考试的人员，须符合下列条件： （一）中华人民共和国公民。 （二）拥护中国共产党的领导，品德良好，遵纪守法。 （三）身体健康状况符合国家和招生单位规定的体检要求。 （四）考生学业水平必须符合下列条件之一： 1.国家承认学历的应届本科毕业生（含普通高校、成人高校、普通高校举办的成人高等学历教育应届本科毕业生）及自学考试和网络教育届时可毕业本科生。考生录取当年9月1日前必须取得国家承认的本科毕业证书，否则录取资格无效。2.具有国家承认的大学本科毕业学历的人员。 3.获得国家承认的高职高专毕业学历后满2年（从毕业后到录取当年9月1日，下同）或2年以上的人员，以及国家承认学历的本科结业生，符合招生单位根据本单位的培养目标对考生提出的具体学业要求的，按本科毕业同等学力身份报考。 4.已获硕士、博士学位的人员。 在校研究生报考须在报名前征得所在培养单位同意。 专硕报名条件报名参加全国专业学位硕士研究生招生考试的，按下列规定执行。 （一）报名参加法律（非法学）专业学位硕士研究生招生考试的人员，须符合下列条件：1.符合第十五条中的各项要求。 2.报考前所学专业为非法学专业（普通高等学校本科专业目录法学门类中的法学类专业[代码为0301]毕业生、专科层次法学类毕业生和自学考试形式的法学类毕业生等不得报考）。 （二）报名参加法律（法学）专业学位硕士研究生招生考试的人员，须符合下列条件：1.符合第十五条中的各项要求。 2.报考前所学专业为法学专业（仅普通高等学校本科专业目录法学门类中的法学类专业[代码为0301]毕业生、专科层次法学类毕业生和自学考试形式的法学类毕业生等可以报考）。 （三）报名参加工商管理、公共管理、工程管理、旅游管理、工程硕士中的项目管理、教育硕士中的教育管理、体育硕士中的竞赛组织专业学位硕士研究生招生考试的人员，须符合下列条件：1.符合第十五条中第（一）、（二）、（三）各项的要求。 2.大学本科毕业后有3年以上工作经验的人员；或获得国家承认的高职高专毕业学历或大学本科结业后，符合招生单位相关学业要求，达到大学本科毕业同等学力并有5年以上工作经验的人员；或获得硕士学位或博士学位后有2年以上工作经验的人员。 工商管理硕士专业学位研究生相关考试招生政策同时按照《教育部关于进一步规范工商管理硕士专业学位研究生教育的意见》（教研〔2016〕2号）有关规定执行。 （四）报名参加法律（非法学）、法律（法学）、工商管理、公共管理、工程管理、旅游管理、工程硕士中的项目管理、教育硕士中的教育管理、体育硕士中的竞赛组织以外的其他专业学位硕士研究生招生考试的人员，须符合第十五条中的各项要求。单独考试报名条件(一）符合第十五条中第(一)、(二)、(三)各项的要求。(二）取得国家承认的大学本科学历后连续工作4年以上，业务优秀，已经发表过研究论文(技术报告)或者已经成为业务骨干，经考生所在单位同意和两名具有高级专业技术职称的专家推荐，定向就业本单位的在职人员;或获硕士学位或博士学位后工作2年以上，业务优秀，经考生所在单位同意和两名具有高级专业技术职称的专家推荐，定向就业本单位的在职人员。报名流程报名包括网上报名和现场确认两个阶段。 所有参加硕士研究生招生考试的考生均须进行网上报名，并到报考点现场确认网报信息和采集本人图像等相关电子信息，同时按规定缴纳报考费。 （一）网上报名1.网上报名时间为 2018年10月10日至10月31日，每天9:00—22:00。网上预报名时间为2018年9月24日至9月27日，每天9:00—22:00。 2.考生应在规定时间登录“中国研究生招生信息网”(公网网址：https://yz.chsi.com.cn，教育网址：https://yz.chsi.cn，以下简称“研招网”)浏览报考须知，并按教育部、省级教育招生考试机构、报考点以及报考招生单位的网上公告要求报名。报名期间，考生可自行修改网上报名信息或重新填报报名信息，但一位考生只能保留一条有效报名信息。逾期不再补报，也不得修改报名信息。 3.考生报名时只填报一个招生单位的一个专业。待考试结束，教育部公布考生进入复试的初试成绩基本要求后，考生可通过“研招网”调剂服务系统了解招生单位的调剂办法、计划余额信息，并按相关规定自主多次平行填报多个调剂志愿。 （二）现场确认1.所有考生(不含推免生)均应当在规定时间内到报考点指定地点现场核对并确认其网上报名信息，逾期不再补办。现场确认时间由各省级教育招生考试机构根据国家招生工作安排和本地区报考组织情况自行确定和公布。 2.考生现场确认应当提交本人居民身份证、学历证书(应届本科毕业生持学生证)和网上报名编号，由报考点工作人员进行核对。报考“退役大学生士兵”专项硕士研究生招生计划的考生还应当提交本人《入伍批准书》和《退出现役证》。 3.所有考生均应当对本人网上报名信息进行认真核对并确认。报名信息经考生确认后一律不作修改，因考生填写错误引起的一切后果由其自行承担。 4.考生应当按规定缴纳报考费。 5.考生应当按报考点规定配合采集本人图像等相关电子信息。 准考证打印考生应当在2018年12月14日至12月24日期间，凭网报用户名和密码登录“研招网”自行下载打印《准考证》。《准考证》使用A4幅面白纸打印，正、反两面在使用期间不得涂改或书写。考生凭下载打印的《准考证》及居民身份证参加初试和复试。 更多详细信息，前往研招网查询：https://yz.chsi.com.cn/kyzx/jybzc/201808/20180821/1715735904.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——读写文件（二）]]></title>
      <url>%2F2018%2F08%2F25%2Fpython-zhongjijiaochengduxiewenjianer%2F</url>
      <content type="text"><![CDATA[先修知识通过上节学习了如何处理文件路径、创建文件夹，接下来我们就可以在计算机中指定文件的位置，进行读写。 开始之前，我们需要简单的了解一下文件的类型。诸如带有 .txt扩展名和 .py 扩展名的文件为纯文本文件，可以用Windows系统的记事本打开。我们接下来所写的程序可以轻易的读取纯文本文件的内容。诸如图像、PDF、电子表格（Excel）、可执行程序等文件为二进制文件，用Windows系统的记事本打开会出现乱码。 Python读写文件的步骤 调用 open() 函数，打开一个 File 文件对象。 调用 File 的 read() 或 write() 方法进行读取与写入操作。 调用 File 的 close() 方法，关闭文件。 要进行完整的读写操作，以上三个步骤缺一不可。 open() 函数可接受两个参数: open(para1, para2) 其中,para2可以为： 为空，则默认采取读模式打开文件。 ‘r’：读模式，即只能读取文件，无法修改。 ‘w’：写模式，即可以向文件中添加文本内容，会覆盖文件原有内容。 ‘a’：添加模式，即在原有内容末尾添加文本内容。 当 open() 函数打开的文件不存在时，写模式和添加模式都会创建一个新的空文件。每次读取或写入文件后，必须调用 close() 方法将其关闭，才能在此打开该文件。 代码示例# py01 # 读取一行文本 pyFile = open(&apos;C:\\python3-tutorial\\lesson-00\\python3.txt&apos;) fileContent = pyFile.read() print(fileContent) # 爱编程，爱学习。 pyFile.close() # ============================================= # py02 # 读取多行文本 lineFile = open(&apos;C:\\python3-tutorial\\lesson-00\\Python.txt&apos;) lineContent = lineFile.readlines() print(lineContent) # [&apos;资源分享，尽在Hicoder。\n&apos;, &apos;\n&apos;, &apos;学习Python，请到 https://linjianming.com/ \n&apos;, &apos;百度搜索【随心而码】快速前往。\n&apos;, &apos;\n&apos;, &apos;代码如诗。&apos;] lineFile.close() # ============================================== # py03 # 写入文件 lineFile = open(&apos;C:\\python3-tutorial\\lesson-00\\Python.txt&apos;, &apos;a&apos;) lineFile.write(&apos;\nHello World!&apos;) lineFile.close() lineFile = open(&apos;C:\\python3-tutorial\\lesson-00\\Python.txt&apos;) content = lineFile.readlines() print(content) # [&apos;资源分享，尽在Hicoder。\n&apos;, &apos;\n&apos;, &apos;学习Python，请到 https://linjianming.com/ \n&apos;, &apos;百度搜索【随心而码】快速前往。\n&apos;, &apos;\n&apos;, &apos;代码如诗。\n&apos;, &apos;Hello World!&apos;] lineFile.close() 动手敲一敲代码，看看效果吧。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——读写文件（一）]]></title>
      <url>%2F2018%2F08%2F24%2Fpython-zhongjijiaochengduxiewenjianyi%2F</url>
      <content type="text"><![CDATA[我们之前练习时所编写的程序，大多用变量来保存数据，当程序运行结束，我们计算机中的数据也随之消失。如果我们希望程序运行结束后数据仍然保留，则需要将数据保存到文件中。本节将讲解如何在我们的计算机上创建、读取和保存文件。 OS模块的使用构建文件路径什么是文件路径？所谓文件路径指明了文件在计算机上的位置。比如Windows系统下 C:\Users\Hicoder\Pictures\ 指的是我们计算机中C盘中用户文件夹下的Hicoder文件夹下的图片文件夹。如下图： 几点注意： 1、在Windows系统中，路径是使用反斜杠来分隔文件夹。在OS X 和 Linux 系统中，使用正斜杠作为路径分隔符来分隔文件夹。 2、Windows系统有盘符的概念，即C盘、D盘等。OS X 和 Linux 系统没有盘符概念，统一称作文件夹或者目录。 3、第一个文件夹通常称之为根文件夹或根目录。Windows系统第一个文件夹为某个盘，如C盘。OS X 和 Linux 系统第一个文件夹则为路径上第一个文件夹。 构建文件路径os.path.join() 函数用来构建文件路径，将单个文件或文件夹名称传递给它，将返回一个文件路径字符串。 import os # 引入os模块 filePath = os.path.join(&apos;C:\\&apos;, &apos;Users&apos;, &apos;Hicoder&apos;, &apos;Pictures&apos;) print(filePath) # C:\Users\Hicoder\Pictures 如果你在交互式环境中，即IDLE中输入代码 os.path.join(&#39;C:\\&#39;, &#39;Users&#39;, &#39;Hicoder&#39;, &#39;Pictures&#39;) 运行，得到的结果为：&#39;C:\\Users\\Hicoder\\Pictures&#39; 。多了一个反斜杠，为转义字符。 获取当前文件路径os.getcwd() 函数可以获取当前工作路径的字符串。 import os # 引入os模块 print(os.getcwd()) 将上面代码保存到一个文件，将其放在你电脑的某个文件夹，用IDLE打开该文件并运行，将显示当前文件路径。尝试一下吧。 创建新文件夹os.makedirs() 函数可以创建新的文件夹。该函数接受你指定的文件路径，从而创建文件夹。 import os os.makedirs(&apos;C:\\python3-tutorial\\lesson-00&apos;) 注意：该函数只能创建文件夹，无法创建文件 查看C盘，成功生成路径：C:\python3-tutorial\lesson-00 查看文件大小os.path.getsize(file_path) 函数将返回所给参数 file_path 中文件的字节数（文件大小）。 我们先手动在上面创建的文件夹中创建一个空的文本文件 python3.txt。 import os fileSize = os.path.getsize(&apos;C:\\python3-tutorial\\lesson-00\\python3.txt&apos;) print(fileSize) # 0 在 python3.txt 文件中添加一些字符，保存。再查看文件大小。试一试。 查看文件夹内容os.listdir(path) 将返回所给文件夹中所有的文件或文件夹。 我们先手动在上面创建的文件夹 lesson-00 中创建一些文件和文件夹。随意创建。我创建的： import os allFile = os.listdir(&apos;C:\\python3-tutorial\\lesson-00\\&apos;) print(allFile) # [&apos;1314&apos;, &apos;calc.py&apos;, &apos;python3.txt&apos;, &apos;Python教程.txt&apos;] 实战-编写一个程序统计某个文件夹中所有文件的大小我们先将上面创建的 lesson-00 文件夹中的文件添加一些内容，以供下面测试。 import os totalSize = 0 for fileName in os.listdir(&apos;C:\\python3-tutorial\\lesson-00&apos;): totalSize = totalSize + os.path.getsize(os.path.join(&apos;C:\\python3-tutorial\\lesson-00&apos;, fileName)) print(totalSize) 将上面代码保存到一个文件中，运行看看结果如何。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python视频教程分享]]></title>
      <url>%2F2018%2F08%2F21%2Fshare-python-videos%2F</url>
      <content type="text"><![CDATA[入门教程文档Python入门指南：Python3.6.3 http://www.pythondoc.com/pythontutorial3/index.html ··· 视频黑马程序员：Python3.x https://pan.baidu.com/s/1kWTtPaB 慕课网廖雪峰：Python2.7.x https://www.imooc.com/learn/177 ··· 进阶教程文档Python - 100天从新手到大师：https://github.com/jackfrued/Python-100-Days 深入Python3：http://old.sebug.net/paper/books/dive-into-python3/ 廖雪峰Python教程：https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 ··· 视频慕课网廖雪峰：Python2.7.x https://www.imooc.com/learn/317 ···]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2018最新seo基础教程——入门请看]]></title>
      <url>%2F2018%2F08%2F13%2F2018zuixinseojichujiaochengrumenqingkan%2F</url>
      <content type="text"><![CDATA[你一直听到这个词，但是你怎么在搜索引擎中排名更高呢？我知道，当我第一次听到这个词，听起来像只有少数人懂得如何使用的巫术魔术。 现实是，SEO不是火箭科学。有些大师会认为需要多年的专心研究才能理解，但我不认为这是真的。当然，掌握微妙的细微差别需要时间，但事实是，你可以在几分钟内学习基础知识。 所以，我不得不思考：“为什么我不把基本的东西放在一个职位？ 可以肯定的是，这是一个漫长的过程，但是经过多年的搜索引擎优化和幕后工作来帮助企业获得首页排名，我相信这是你所需要知道的。如果您希望提高流量，以便增加销售额，请遵循以下基本准则。 交通陷阱（以及如何搜索引擎优化真的有效） 许多营销人员认为SEO只是作为免费流量来源的错误。确实，免费流量是最终结果，但这不是SEO的工作原理。 搜索引擎优化的真正目的是帮助那些正在寻找你的人找到你。要做到这一点，您必须将您网站上的内容与人们试图找到的内容进行匹配。 例如： 玛丽卖定制针织毛衣。在她的博客上，她展示了她如何亲手制作毛衣，经常谈论她使用的不同纱线。与纱线相关的关键词没有多少竞争关系，玛丽出版了很多关于纱线的优秀内容，所以不久之后，她就有了几种不同类型纱线的头版排名。 你看到潜在的问题吗？ 寻找纱线的人最有可能编织自己，他们不太可能有兴趣购买玛丽的毛衣。她会得到很多的流量，当然，但没有一个流量会转换，因为游客有完全不同的目标。 这里的教训是：如果你想让SEO为你工作，你需要确保你的目标与你的访问者的目标相匹配。这不是交通。这是关于搞清楚你想要什么，然后优化关键字，引入想要同样东西的访问者。 你如何发现这些关键字是什么？ 简单：研究。 研究：如何找到正确的关键词 当然，研究有点乏味，但它是找到正确关键字的不可缺少的部分。您想要发现关键字： 有很高的搜索量（人们正在寻找关键字） 有较低的竞争（较少的结果将意味着您的排名更高的机会提高） 由您的内容支持（关键字与您的网站相关）。 有很多工具可以帮助您找到正确的关键字，最受欢迎的是百度的基于搜索的关键字工具。它会根据实际的百度搜索结果提供结果，如果您已登录AdWords帐户，则还会为您提供一个为帐户中的网站定制的关键字提示列表。 什么是搜索引擎优化（SEO）？ 搜索引擎优化是一个营销学科，专注于在有机（非付费）搜索引擎结果日益增长的知名度。搜索引擎优化包括提高排名，提高流量，提高搜索引擎意识所需的技术和创造性要素。搜索引擎优化有许多方面，从网页上的文字到其他网站在网络上链接到您的方式。有时搜索引擎优化只是一个问题，以确保您的网站结构的搜索引擎理解的方式。 搜索引擎优化不只是建立搜索引擎友好的网站。这是关于让你的网站更好的人。seo基础教程技术网我们相信这些原则是齐头并进的。 本指南旨在描述搜索引擎优化的所有领域-从找到产生您网站流量的术语和短语（关键字），使您的网站对搜索引擎友好，建立链接和营销您的网站的独特价值。如果你对这个东西感到困惑，你并不孤单，我们来这里帮忙。 为什么我的网站需要SEO？ 大部分的网络流量都是由主要的商业搜索引擎Baidu，360和sogou！。虽然社交媒体和其他类型的流量可以产生访问您的网站，搜索引擎是大多数互联网用户的主要导航方法。无论您的网站是提供内容，服务，产品，信息还是其他任何内容，情况都是如此。 搜索引擎是独一无二的，因为它们提供有针对性的流量-寻找你提供的东西。搜索引擎是实现这一目标的道路。如果搜索引擎无法找到您的网站，或将您的内容添加到他们的数据库，你错过了难以置信的机会，以吸引流量到您的网站。 搜索查询-用户在搜索框中键入的词-具有非凡的价值。经验表明，搜索引擎流量可以使组织的成功（或打破）。有针对性的网站流量可以提供宣传，收入和曝光，就像没有其他渠道的营销。与其他类型的营销和推广相比，投资SEO可以获得非常高的回报率。 为什么搜索引擎不能找出我的网站没有搜索引擎优化？ 搜索引擎是聪明的，但他们仍然需要帮助。主要引擎一直在努力改进他们的技术，以更深入地抓取网页，并向用户返回更好的结果。然而，搜索引擎如何运作是有限度的。鉴于正确的搜索引擎优化可以净数千访问者和更多的关注，错误的举动可以隐藏或深埋在搜索结果的可见性是最小的网站。 搜索引擎优化还可以提高搜索引擎的排名，从而将内容放置在搜索者更容易找到的地方。互联网正变得越来越有竞争力，那些执行搜索引擎优化的公司将在游客和客户方面拥有决定性的优势。 我可以为自己做SEO吗？ SEO的世界是复杂的，但大多数人可以很容易地理解基础知识。即使是少量的知识也可以产生很大的影响。免费的SEO教育在网络上广泛使用，包括像这样的指南。结合这一点点练习，你正在成为一个上师的方式，根据您的时间承诺，学习意愿以及网站的复杂程度，您可能会决定需要专家来为您处理问题。实践SEO的公司可能会有所不同;一些专注于高度专业化，另一些则采取更广泛和更普遍的方法，无论如何，最好牢牢把握核心概念。 站点地图 站点地图就像搜索引擎的路线图。他们给你的网站上的所有不同页面的机器人指示，确保他们找到一切。 您可以创建两种类型的站点地图：HTML站点地图和XML站点地图。主要区别在于XML站点地图是专门为搜索引擎编码的，而HTML站点地图也很容易让人阅读。您可以链接到它们，让访问者随时随地浏览一下。 如果您的页面少于几百页，则应该在HTML站点地图中为每个页面添加一个链接。如果您的网站有几千页或更多，只需链接到最重要的页面。 另一方面，XML站点地图包含您网站的每一页，即使您的网站有一百万页。您可以使用XMLSitemapCreator之类的工具为您自动创建站点地图。一旦你的XML网站地图被创建，然后你想提交给谷歌网站管理员中央和必应，使主要的搜索引擎可以抓取和索引您的网站。 转自：seo http://www.hkxiaopan.com]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从零开始搭建自己的网站——利用FTP上传文件到服务器]]></title>
      <url>%2F2018%2F08%2F13%2Fconglingkaishidajianzijidewangzhanliyongftpshangchuanwenjiandaofuwuqi%2F</url>
      <content type="text"><![CDATA[服务器有了，域名有了，网络服务部署好了，域名也解析到了服务器，剩下的就是网站源码了。我们通过 ftp 工具将网站源码上传到远程服务器。 这里使用 FileZilla ，大家可在官网下载安装： https://www.baidu.com/link?url=2bBFeXPQJE0BcxRSCSlorjoSKD30JJaXKzWAlAoFaGrLoSWAWbUxePW0QwPwwmzD&amp;wd=&amp;eqid=867f1be80000c764000000065b713ff3 使用教程打开安装好的 FileZilla ，点击左上角 文件 ，选择 站点管理器 ，进行如下设置： 成功进入后，找到你服务器的 www 目录，然后进入 wwwroot 目录（安装宝塔面板的是这样）。然后将你自己电脑上的源码上传到该目录即可。 安装worldpress参考：https://linjianming.com/worldpressshiyongjiaochengruheanzhuangworldpress.html ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从零开始搭建自己的网站——给服务器配置web服务]]></title>
      <url>%2F2018%2F08%2F13%2Fconglingkaishidajianzijidewangzhangeifuwuqipeizhiwebfuwu%2F</url>
      <content type="text"><![CDATA[服务器有了，还得配置网络服务，别人才能访问你的服务器。目前常用的网络服务引擎有 Apache、Nginx。大家可以自行下载相关web服务安装包，进行安装。但这很不方便，在此推荐大家使用服务器面板，囊括所有要用到的网络服务软件。 我使用过 Wdcp、Bt，两款都是免费，各有优劣，不过Wdcp很久没有更新了。个人使用认为Bt比较好用。大家可自行选择。下面推荐Bt的安装。 注意需在纯净系统下安装，也就是买好服务器，别动它，直接装面板。使用Xshell安装。 Centos安装命令： yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh 其他安装请参考： https://www.bt.cn/bbs/thread-1186-1-1.html 安装好以后，记录下用户名密码。然后记得在你的百度云控制台（或其他云提供商控制台）的云服务器管理界面，设置安全组，开放 8888 端口。参考： https://cloud.baidu.com/doc/BCC/GettingStarted.html#.E7.AE.A1.E7.90.86.E5.AE.89.E5.85.A8.E7.BB.84 面板安装以后，在浏览器通过你服务器的 ip:8888 进入面板，输入用户名密码登录。第一次进入会推荐安装web服务，安装 Nginx 那个就好。 参考：http://docs.bt.cn/424211 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从零开始搭建自己的网站——购买域名]]></title>
      <url>%2F2018%2F08%2F13%2Fconglingkaishidajianzijidewangzhangoumaiyuming%2F</url>
      <content type="text"><![CDATA[购买域名，并解析到云服务器去哪购买 百度云 腾讯云 阿里云 Godday 其他 如何购买进入域名购买页面，如百度云： https://cloud.baidu.com/product/bcd.html ，在搜索框输入你想注册的域名。 填写好相关信息，完成购买 将域名解析到云服务器进入你购买域名的网站，进入你的域名解析界面。 选择你要解析的域名，点击 解析 选项，进入解析界面。 到此，域名解析成功。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WorldPress使用教程——如何安装WorldPress]]></title>
      <url>%2F2018%2F08%2F13%2Fworldpressshiyongjiaochengruheanzhuangworldpress%2F</url>
      <content type="text"><![CDATA[安装前的准备1.下载最新版的 WordPress （这里演示为WordPress 4.9.4 官方中文版），解压后，将WordPress文件夹里面的所有文件，上传到你的服务器域名所绑定的根目录。 2.新建一个MySQL数据库（使用宝塔面板的请参考：http://docs.bt.cn/424222） 比如这里我的域名为 demo.linjianming.com ，新建的数据库信息如下： 数据库名：自己取 数据库用户名：自己取 数据库密码：自己取 主机：localhost （没有特殊说明，一般都是localhost） 安装WordPress1.访问域名，出现下图界面，直接点击【现在就开始】 2.填写你的MySQL数据库信息，需要注意的是，修改一下”表前缀”，不要使用默认的 wp_ ，【提交】 3.已经链接上数据库，【现在安装】 4.填写网站的基本信息，建议不要使用默认的用户名 admin，此外密码最好强些，【安装WordPress】 5.安装成功 6.使用上面设置的用户名和密码登录后台 7.默认的WordPress后台 8.默认的网站首页]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从零开始搭建自己的网站——购买云服务器]]></title>
      <url>%2F2018%2F08%2F13%2Fconglingkaishidajianzijidewangzhangoumaiyunfuwuqi%2F</url>
      <content type="text"><![CDATA[购买云服务器的流程详解——以百度云为例注册与登录百度云如果已经有百度账号，直接进入百度云官网 https://cloud.baidu.com/ ，点击右上角登录按钮进行登录。 如果你还没有百度账号或者想新注册一个百度云账号，进入百度云官网，点击右上角注册按钮进入注册。 在注册界面按照提示填写好注册信息，完成注册。 注册好以后进入登录界面，用注册好的百度云账号进行登录。 登录以后进入了你的百度云控制中心，点击右上角的尖括号，选择 用户中心，进入。 在用户中心，按照提示完成实名认证，未认证不可购买百度云产品。 完成实名认证后，回到百度云首页， https://cloud.baidu.com/ ，选择 产品 ——&gt; 全部产品 ——> 云服务器BCC，进入购买云服务器。 在服务器选购页面，配置可自行选择，操作系统建议选择 centos 7.x 。 在选购页面，下面的系统信息，用户名默认为 root，管理员密码建议可选择随机生成或用户自定义，设定好的密码需牢记。稍后要用到。 所有信息设置好以后可进入结算。结算完成后云服务器即完成购买，它就是你的另一台计算机了，不过它是为用户提供服务的计算机。购买完成进入你的百度云管理控制台。 使用云服务器服务器有了，该怎么用呢？服务器虽然使用权已经归我们了，但是它并不在我们身边，无法像使用个人计算机那样使用它。我们通过服务器远程管理工具来使用它。这里推荐 Xshell 。使用方法如下： ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——输入输出]]></title>
      <url>%2F2018%2F08%2F13%2Fpython-zhongjijiaochengshurushuchu%2F</url>
      <content type="text"><![CDATA[前面我们已经简单应用过输入输出了。 # 输出 print(&apos;请输入一个整数：&apos;) # 输入 num = input() num2 = input(&apos;Enter a num:&apos;) 本节将详细讲讲输入输出那些事。 格式化输出% 运算符，旧式的格式化输出num = 3 count = 12 print(&apos;%d&apos; %num) # 格式化整数 str = &apos;hello&apos; print(&apos;%s&apos; %str) # 格式化字符串 与数值有关的字符串格式化字符及其作用如下所示： d： 有符号十进制整数 u： 无符号十进制整数 o： 无符号八进制整数 x： 无符号十六进制整数，a～f采用小写形式 X： 无符号十六进制整数，A～F采用大写形式 f： 浮点数 e，E： 浮点数，使用科学计数法 g，G： 浮点数，使用最低有效数位 format格式化输出print(&apos;{} is a {}&apos;.format(&apos;Jack&apos;, &apos;Pythoner&apos;)) # Jack is a Pythoner ‘{}’的内容会被format()中的参数所替代，可以在‘{}’里填上数字来指定format()中的位置，但是如果‘{}’里的是参数，其中的内容会以被format()中的字符替换： print(&apos;{name} is a {job}&apos;.format(name=&apos;Jack&apos;, job=&apos;Pythoner&apos;)) # Jack is a Pythoner 还可使用‘:’来限定数值型的位数固定： import math print(&apos;pi 的值是： {0:.5f}&apos;.format(math.pi)) # .5f表示取小数点后五位 # pi 的值是： 3.14159 numb = 1 numbe = 12 number = 135 print(&apos;{}\n{}\n{}&apos;.format(numb, numbe, number)) # 1 # 12 # 135 print(&apos;{:4d}\n{:3d}\n{:1d}&apos;.format(numb, numbe, number)) # 1 # 12 # 135 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从零开始搭建自己的网站]]></title>
      <url>%2F2018%2F08%2F12%2Fconglingkaishidajianzijidewangzhan%2F</url>
      <content type="text"><![CDATA[如今，上网已经成为了我们生活中必做的一件事。可是，这么多的网站是怎么建立的呢？ 网站的分类与组成大家打开百度、淘宝的网站，可以看到上面都是由很多内容组成的，百度的首页内容少些，主要是搜索框；淘宝的则非常丰富，各种条目、图片，主要是产品信息。 最初的网站，只是用来简单的展示信息，比如公司的主要情况等，非常简单，只有文字。后来慢慢发展有了图片、视频、音频，出现各种各样的网站，如博客、论坛、网络商店、在线服务网站等。比较知名的有网景、谷歌、雅虎、搜狐、新浪、网易等。再后来，有淘宝、当当、京东、爱奇艺、优酷、网易云音乐等。 这么多的网站，到底是怎么建立起来的呢？ 一个网站主要有以下几个部分组成： 域名 网站服务器 网站源代码 其他服务 以上是有网站的所有者（开发者）负责提供与支持。而我们用户，则需要通过浏览器（网站开发者称客户端）才能访问网站，浏览网站所包含的网页。 搭建一个网站每个人都可以拥有属于自己的网站。 利用Github、码云、Coding等代码托管网站，结合静态博客生成工具搭建个人博客、小型企业官网 购买域名、服务器，部署网站服务，利用现有建站工具（Discus建论坛、WorldPress建站工具、织梦cms、phpwind等）搭建各种类型网站 购买域名、服务器，部署网站服务，自己写前端代码、后端代码搭建网站 利用hexo和码云搭建个人博客请参考我的另一篇文章：https://linjianming.com/da-jian-ge-ren-mian-fei-bo-ke-li-yong-hexo-zai-ma-yun-shang-bu-shu-bo-ke.html 利用建站工具搭建网站首先，购买域名和服务器，域名购买请参考：https://linjianming.com/conglingkaishidajianzijidewangzhangoumaiyuming.html 服务器购买请参考：https://linjianming.com/conglingkaishidajianzijidewangzhangoumaiyunfuwuqi.html 然后，将域名解析到你的服务器，请参考：https://linjianming.com/conglingkaishidajianzijidewangzhangoumaiyuming.html 接着，在你的服务器上部署网站服务，请参考：https://linjianming.com/conglingkaishidajianzijidewangzhangeifuwuqipeizhiwebfuwu.html 最后，将建站工具安装包上传到你的服务器，并安装，请参考：https://linjianming.com/conglingkaishidajianzijidewangzhanliyongftpshangchuanwenjiandaofuwuqi.html 安装WorldPress，请参考：https://linjianming.com/worldpressshiyongjiaochengruheanzhuangworldpress.html 访问你的域名，如：linjianming.com ，是不是能看到你的网站啦。 自己写个网站你需要掌握前端网页制作、后端服务器开发。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——json模块介绍]]></title>
      <url>%2F2018%2F08%2F09%2Fpython-zhongjijiaochengjsonmokuaijieshao%2F</url>
      <content type="text"><![CDATA[本节介绍json 模块。 什么是 JSON ？ JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）。 JSON 是轻量级的文本数据交换格式。是用来存储和交换文本信息的语法。 JSON 语法语法规则JSON 语法是 JavaScript 对象表示语法的子集。 数据在名称/值对中 数据由逗号分隔 大括号保存对象 中括号保存数组 { &quot;sites&quot;: [ { &quot;name&quot;:&quot;随心而码&quot; , &quot;url&quot;:&quot;linjianming.com&quot; }, { &quot;name&quot;:&quot;清风云&quot; , &quot;url&quot;:&quot;yun.silent-tech.cn&quot; }, { &quot;name&quot;:&quot;本源空间&quot; , &quot;url&quot;:&quot;originspace.cn&quot; } ] } “name”:”随心而码” , “url”:”linjianming.com” 叫作JSON 对象，他们一般放在 {} 中。 “sites” 为JSON 数组，用 [] 表示。 Python中的json模块json，用于字符串 和 python数据类型间进行转换 json模块提供了四个功能：dumps、dump、loads、load 用法 json.dumps 将 Python 对象编码成 JSON 数据 json.dump 将 JSON 数据通过特殊的形式转换为只有 Python 认识的字符串并写入文件 json.loads 将已编码的 JSON 数据解码为 Python 对象 json.load 将一个包含 JSON 格式数据的可读文件解码为一个 Python 对象并写入文件 import json date = { &quot;sites&quot;: [ { &quot;name&quot;:&quot;随心而码&quot; , &quot;url&quot;:&quot;linjianming.com&quot; }, { &quot;name&quot;:&quot;清风云&quot; , &quot;url&quot;:&quot;yun.silent-tech.cn&quot; }, { &quot;name&quot;:&quot;本源空间&quot; , &quot;url&quot;:&quot;originspace.cn&quot; } ] } str1 = json.dumps(date) # json.dumps 将数据通过特殊形式转换为所有程序语言都认识的字符串 print(str1) with open(&apos;result.json&apos;,&apos;w&apos;) as fp: #json.dump 将数据通过特殊的形式转换为只有python认识的字符串并写入文件 json.dump(date,fp) 在此提醒：命名你的Python文件时，千万不要使用和Python保留的标识符冲突。如，不可将你的文件命名为 json.py ，这与Python系统模块 json 命名冲突。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——random模块介绍]]></title>
      <url>%2F2018%2F08%2F09%2Fpython-zhongjijiaochengrandommokuaijieshao%2F</url>
      <content type="text"><![CDATA[本节介绍 random 模块 random.random()：返回一个随机小数 random.randint(n,m)：返回（n-m）随机整型数据 random.randrange(n,m)：返回（n-m）随机数据 import random # 随机数 print(random.random()) # 返回一个随机小数&apos;0.7564422281693363&apos; print(random.randint(1,5)) # 返回（1-5）随机整型数据 print(random.randrange(1,10)) # 返回（1-10）随机数据 # 生成随机验证码 code = &apos;&apos; for i in range(4): current = random.randrange(0,4) if current != i: temp = chr(random.randint(65,90)) else: temp = random.randint(0,9) code += str(temp) print(code) chr() 用一个范围在 range（256）内的整数（就是0～255）作参数，返回一个对应的字符。 chr(i)：i为任意给定整数 返回值是当前整数对应的ascii字符。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——time、datetime、calendar模块的使用介绍]]></title>
      <url>%2F2018%2F08%2F09%2Fpython-zhongjijiaochengtimedatetimecalendarmokuaideshiyongjieshao%2F</url>
      <content type="text"><![CDATA[本节介绍 Python内置模块 time、datetime、calendar的常用用法。 timetime模块提供各种操作时间的函数。 说明：一般有两种表示时间的方式: 1.时间戳的方式(相对于1970.1.1 00:00:00以秒计算的偏移量),时间戳是惟一的 2.以数组的形式表示即(struct_time),共有九个元素，分别表示，同一个时间戳的struct_time会因为时区不同而不同 time() — 返回时间戳 sleep() — 延迟运行单位为s gmtime() — 转换时间戳为时间元组（时间对象） localtime() — 转换时间戳为本地时间对象 asctime() — 将时间对象转换为字符串 ctime() — 将时间戳转换为字符串 mktime() — 将本地时间转换为时间戳 strftime() — 将时间对象转换为规范性字符串 … import time print(time.asctime()) # 返回时间格式：Thu Aug 9 16:10:44 2018 print(time.asctime(time.localtime())) # 返回时间格式 Thu Aug 9 16:10:44 2018 print(time.ctime()) # 返回时间格式 Thu Aug 9 16:10:44 2018 print(time.strftime(&apos;%Y-%m-%d&apos;)) #默认当前时间 2018-08-09 print(time.strftime(&apos;%Y-%m-%d&apos;,time.localtime())) #默认当前时间 2018-08-09 time.sleep(5) #休眠5s import datetime print(datetime.datetime.now()) # 返回当前时间 2018-08-09 16:41:50.124095 print(datetime.date.fromtimestamp(time.time())) # 时间戳直接转换成日期格式 2017-05-07 print(datetime.datetime.now() + datetime.timedelta(3)) # 返回时间在当前日期上 +3 天 print(datetime.datetime.now() + datetime.timedelta(-3)) # 返回时间在当前日期上 -3 天 print(datetime.datetime.now() + datetime.timedelta(hours= 3)) # 返回时间在当前时间上 +3 小时 print(datetime.datetime.now() + datetime.timedelta(minutes= 30)) # 返回时间在当前时间上 +30 分钟 c_time = datetime.datetime.now() print(c_time) # 当前时间为 2018-08-09 16:41:50.124095 print(c_time.replace(minute=3,hour=2)) # 时间替换 替换时间为‘2018-08-09 02:03:18.181732’ print(datetime.timedelta) # 表示时间间隔，即两个时间点之间的长度 print (datetime.datetime.now() - datetime.timedelta(days=5)) # 返回时间在当前时间上 -5 天 # python 日历模块 import calendar print(calendar.calendar(theyear= 2018)) # 返回2018年整年日历 print(calendar.month(2018,5)) # 返回某年某月的日历，返回类型为字符串类型 calendar.setfirstweekday(calendar.WEDNESDAY) # 设置日历的第一天(第一天以星期三开始） cal = calendar.month(2018, 4) print (cal) print(calendar.monthrange(2018,5)) # 返回某个月的第一天和这个月的所有天数 print(calendar.monthcalendar(2018,5)) # 返回某个月以每一周为元素的序列 cal = calendar.HTMLCalendar(calendar.MONDAY) print(cal.formatmonth(2018, 5)) # 在html中打印某年某月的日历 print(calendar.isleap(2018)) # 判断是否为闰年 print(calendar.leapdays(2000,2018)) # 判断两个年份间闰年的个数 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 中级教程——模块]]></title>
      <url>%2F2018%2F08%2F08%2Fpython-zhongjijiaochengmokuai%2F</url>
      <content type="text"><![CDATA[模块的定义随着开发的进行，我们写的代码越来越多、越来越复杂，这使得我们对代码的维护越来越困难。为了降低代码维护成本，我们通常将各个函数进行分组，放在不同的 .py 文件，形成一个个模块。许多模块放在一起形成包。 简言之，模块是Python代码的集合。 模块的分类 Python内置的模块（内置函数、内置标准库） 众多开发者开发的第三方模块 我们在开发过程中自定义的模块 如何创建自定义模块将我们定义的函数分组封装保存为一个 .py 文件，以后需要用到相同功能就不需要重复写代码，直接引入我们自己的模块就好。 创建自定义模块时，须遵循： 模块名要遵循变量命名规则 自定义的模块名不能与Python内置的模块名冲突 如何使用模块对于Python内置的模块，我们直接通过 import 语句将其导入使用import sys try: num = int(input()) except ValueError: sys.exit() 上面代码我们通过 import 引入了Python内置模块 sys.py，并且使用了 sys 模块的 exit() 方法。sys.exit() 表示退出当前程序。 我们还可以通过 from…import 语句导入一个模块特定的一个或多个部分到我们的程序中。 from sys import exit num = int(input(&apos;请输入一个数：&apos;)) if num != 0: exit() else: print(&apos;0&apos;) 第三方模块的使用 需先安装第三方模块 第三方库一般都会在Python官网注册，pypi.org。可在官网找到要安装的库的名称。 注意：模块，有人也叫库 通过Python的包管理工具 pip 进行安装第三方包 在命令行工具，输入 pip install modname 进行安装。 安装好以后，使用 import 和 from…import 语句进行导入使用 自定义模块的使用将我们自己定义的模块 .py 文件放在正在要引用这个模块的 .py 文件的同级目录。然后使用 import 和 from…import 语句进行导入使用。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——已学知识点简单回顾]]></title>
      <url>%2F2018%2F08%2F07%2Fpython-rumenjiaochengyixuezhishidianjiandanhuigu%2F</url>
      <content type="text"><![CDATA[已学知识点回顾变量、表达式、赋值语句变量名也叫做标识符。 “=” 在Python中叫作赋值符。 运算符有算术运算符、关系运算符、赋值运算符、逻辑运算符、身份运算符、成员运算符、位运算符。运算用来操作变量。 数据类型数据类型指一类值的集合。分为： 数字类型Number 字符串String 列表List 元组Tuple 集合Set 字典Dictionary 新的概念——数据结构：相互之间存在一种或多种特定关系的数据元素的集合。 几种数据结构：栈、队列。 将列表当作栈使用栈的特点：后进的元素先弹出。列表用作栈，可通过append()方法在栈尾追加元素，通过pop()方法在栈尾删除元素。 stack = [1, 5, 7, 11, 16] stack.append(23) print(stack) # [1, 5, 7, 11, 16, 23] stack.pop() print(stack) # [1, 5, 7, 11, 16] stack.pop() print(stack) # [1, 5, 7, 11] 控制流if条件判断语句实例：判断一个数的正负或零。 import sys print(&apos;Enter num.&apos;) try: num = float(input()) except ValueError: print(&apos;Not a Number.&apos;) sys.exit() if num &gt; 0: print(&quot;It&apos;s a positive number.&quot;) elif num == 0: print(&quot;It&apos;s zero.&quot;) else: print(&quot;It&apos;s a negative number.&quot;) 循环语句包括while循环和for循环。 实例：生成九九乘法表。 for i in range(1, 10): for j in range(1, i+1): print(&apos;{}x{}={}\t&apos;.format(i, j, i*j), end=&apos;&apos;) print() 函数函数是可复用的代码块的集合，能够完成特定功能。 定义函数：def func_name([param]): func_code_block 作用域限定了变量的使用范围。 异常处理有效减少代码崩溃带来的损失。 接下来的教程1、面向对象编程2、Python的应用——自动化任务​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——猜数字游戏]]></title>
      <url>%2F2018%2F08%2F06%2Fpython-rumenjiaochengcaishuziyouxi%2F</url>
      <content type="text"><![CDATA[本节将综合前面我们学过的知识点，完成一个完整的程序。 # 这是一个猜数字游戏 import random setNum = random.randint(20,40) print(&apos;本游戏设定的数为20（含）到40（含）之间&apos;) # 游戏者可猜测8次 print(&apos;你可以进行8次猜测。&apos;) for guessTaken in range(1,9): print(&apos;请猜数。&apos;) guessNum = int(input()) if guessNum &lt; setNum: print(&apos;你猜的数太小。&apos;) elif guessNum &gt; setNum: print(&apos;你猜的数太大。&apos;) else: break if guessNum == setNum: print(&apos;恭喜你，第&apos; + str(guessTaken) + &apos;次猜对了。&apos;) else: print(&apos;很遗憾，你没有猜到设定的数：&apos; + str(setNum)) 程序运行，可能得到的运行结果有无数种。我运行得到的一次游戏结果如下： 本游戏设定的数为20（含）到40（含）之间 你可以进行8次猜测。 请猜数。 25 你猜的数太小。 请猜数。 35 你猜的数太大。 请猜数。 30 你猜的数太小。 请猜数。 33 你猜的数太大。 请猜数。 32 你猜的数太大。 请猜数。 31 恭喜你，第6次猜对了。 接下来，我们一行行来解释代码。 # 这是一个猜数字游戏 import random setNum = random.randint(20,40) print(&apos;本游戏设定的数为20（含）到40（含）之间&apos;) 程序最上面的一行注释告诉我们，这是个猜数字的游戏。然后程序导入了模块 random ，以便能够使用 random.randint() 函数生成一个随机整数，让玩家来猜。本程序生成的随机数为20到40之间（包含二者）的随机整数，保存在变量 setNum 中。然后程序告诉玩家，它已经设定好了数字，在20和40之间。 # 游戏者可猜测8次 print(&apos;你可以进行8次猜测。&apos;) for guessTaken in range(1,9): print(&apos;请猜数。&apos;) guessNum = int(input()) if guessNum &lt; setNum: print(&apos;你猜的数太小。&apos;) elif guessNum &gt; setNum: print(&apos;你猜的数太大。&apos;) else: break 程序告诉玩家可进行8次猜测。程序根据猜的数与设定的数进行大小比较，如果在8次猜测机会内猜对或者猜测完8次都未猜对，for 循环将退出。 再次讲解：input() 接受任意输入内容，返回字符串，因此需要使用 int() 函数将返回值转换为整型，才能与设定的整型数进行比较。 if guessNum == setNum: print(&apos;恭喜你，第&apos; + str(guessTaken) + &apos;次猜对了。&apos;) else: print(&apos;很遗憾，你没有猜到设定的数：&apos; + str(setNum)) 当在8次猜测中，有一次猜对便退出 for 循环，进入了 if 判断，符合 guessNum == setNum，便输出猜对了的提示。当8次猜测都未猜对，也将退出 for 循环，进入 if 判断，此时输出未猜对的提示，并告知设定的数。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——异常处理]]></title>
      <url>%2F2018%2F08%2F06%2Fpython-rumenjiaochengyichangchuli%2F</url>
      <content type="text"><![CDATA[在程序中，如果遇到错误则意味着整个程序崩溃。为了降低这种错误带来的损失，我们希望程序能够检测错误，处理他们，然后继续运行。这就是异常处理。 def divide(e): return 48 / e print(divide(6)) print(divide(8)) print(divide(3)) print(divide(0)) print(divide(12)) 运行上面代码，得到如下结果： 8.0 6.0 16.0 Traceback (most recent call last): File &quot;G:/学习python/Python编程快速上手/第四章/errorExcept.py&quot;, line 11, in &lt;module&gt; print(divide(0)) File &quot;G:/学习python/Python编程快速上手/第四章/errorExcept.py&quot;, line 6, in divide return 48 / e ZeroDivisionError: division by zero 程序报了一个错误，除数为零。我们知道，在数学计算中，除数为零是错误的。这个程序遇到这个错误便崩溃了，无法继续执行下面的代码。 错误可以由 try 和 except 语句来处理。我们将那些可能出错的语句放在 try 子句中，如果错误发生，程序执行将转到 except 子句处。 def divide(e): try: return 48 / e except ZeroDivisionError: print(&apos;Error: Invalid argument.&apos;) print(divide(6)) print(divide(8)) print(divide(3)) print(divide(0)) print(divide(12)) 执行结果如下： 8.0 6.0 16.0 Error: Invalid argument. None 4.0 当程序运行遇到 ZeroDivisionError 错误，便提示 Error: Invalid argument. ，同时返回值 None 。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——函数之作用域]]></title>
      <url>%2F2018%2F08%2F05%2Fpython-rumenjiaochenghanshuzhizuoyongyu%2F</url>
      <content type="text"><![CDATA[局部和全局作用域在函数内声明的变量，只作用于函数内部——局部作用域，这个变量称为局部变量。 在所有函数外部声明的变量，作用于整个程序——全局作用域，这个变量称为全局变量。 name = &apos;Jack&apos; # 这个name为全局变量 def print_name(): name = &apos;John&apos; # 这个name为局部变量，只作用于当前函数 print(name) #打印的也是局部变量 John 使用规范 局部变量不能在全局作用域内使用 def num(): nums = 63527 num() print(nums) 程序报错： Traceback (most recent call last): File &quot;G:/学习python/Python编程快速上手/第四章/func_1.py&quot;, line 17, in &lt;module&gt; print(nums) NameError: name &apos;nums&apos; is not defined 报错原因：nums只属于局部作用域，当执行完num()函数后，局部作用域便销毁了，即nums变量也不存在了。所以运行print(nums)，Python便报错，说nums没有定义。 局部变量只能在自己所属的局部作用域内使用 def love(): lover = &apos;ziteng&apos; other_love() print(lover) def other_love(): lover = &apos;xuanya&apos; love() # ziteng 程序运行流程： 全局变量可作用于任何一个局部作用域 def tree(): print(tree_num) tree_num = 188 tree() # 188 print(tree_num + 1) # 189 解释：在 tree() 函数中没有定义了的变量 tree_num 。所以当运行 tree() 函数时，Python认为它是引用全局变量 tree_num 。 局部变量和全局变量名称可以相同，但应尽量避免 def hi(): hiStr = &apos;Hello&apos; print(hiStr) def world(): hiStr = &apos;World&apos; print(hiStr) hi() print(hiStr) hiStr = &apos;Welcome!&apos; world() print(hiStr) 打印结果如下： World Hello World Welcome! ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——函数]]></title>
      <url>%2F2018%2F08%2F04%2Fpython-rumenjiaochenghanshu%2F</url>
      <content type="text"><![CDATA[什么是函数？函数，可重复使用的代码块集合。让复杂的重复工作简单化。 函数分类 Python内置的函数，如我们前面课程讲过的 type()、len()、print()、input()等。 Python标准库，能够实现特定功能的代码块的集合，比如 math 库，调用它便可以使用其数学计算功能，进行复杂的数学计算。使用 import 导入使用。 第三方库，由全球Python使用者、爱好者开发维护的函数库。也是使用 import 导入使用。 开发者（我们）自定义的函数。 我们如何定义函数？def func_name([param]): func_code_block return 中文解释：def是定义函数的关键词，它声明这是一个函数。其后跟你定义的函数名称，该名称需符合标识符（变量名）定义规则。函数名后跟一个括号，里面可以有参数，这个参数叫作形式参数。括号后面跟冒号。然后便是函数关键部分——函数体，实现特定功能的代码块。return用来返回函数运行后的结果。如果没有返回值，则返回None，此时return可不写。 如何使用函数？通过函数名加括号来调用函数，即让函数运行。 def print_hello(): print(&apos;Hello Boys and Girls.&apos;) print_hello() # 打印 Hello Boys and Girls. 打印多句“Hello Boys and Girls.” def print_hello(n): for i in range(n)： print(&apos;Hello Boys and Girls.&apos;) print_hello(5) # 打印5句 Hello Boys and Girls. # n 为形式参数 # 5 为实际参数 # 当调用函数时，括号里传入一个具体数字，这个数字便会传递给形式参数n，相当于给n赋值，然后n参与函数体的运行。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——控制流之循环结构]]></title>
      <url>%2F2018%2F08%2F03%2Fpython-rumenjiaochengkongzhiliuzhixunhuanjiegou%2F</url>
      <content type="text"><![CDATA[循环结构的定义在分析实际问题时，我们经常遇到一些具有规律性的重复操作。当用程序来解决问题时，通过重复执行某些代码块来到达目的。被重复执行的代码块叫作循环体，能否继续重复执行取决于循环的终止条件。循环结构由循环体和循环终止条件两部分组成。 循环结构的分类 while循环语句 for循环语句 while循环语句基本语法： while condition: repeat_code_block 中文解释： 判断 condition 表达式，如果其为真（True），则执行 repeat_code_block ，执行完一次再次判断 condition，直到 condition 为假（False） while示例从列表最后一个值开始，往前依次删除列表中的值，直到列表为空。 list = [1314, 520, &apos;my love&apos;, &apos;你在哪？&apos;] while len(list) &gt; 0: print(&apos;删除列表中的值： &apos; ) print(list.pop()) 注意：循环终止条件不能一直为真，否则循环将永远执行下去，这就是死循环。 for循环语句基本语法： for element in iterable: repeat_code_block 中文解释：针对 iterable 中的每个值 element 执行 repeat_code_block，直到遍历了 iterable 中的每个值。 iterable 可以是字符串、元组、列表、集合等。 for示例numList = range(1,12) for i in numList: print(i) 讲解：range 用来生成一系列数，1 表示从1开始，12 表示到12（不含12）结束。该程序将1到11共十一个数输出。 break与continuebreak：终止当前循环 continue：跳过本次循环 names = [&apos;John&apos;, &apos;Tom&apos;, &apos;Edison&apos;, &apos;Jack&apos;] for name in names: if name == &apos;Tom&apos;: break print(name) # 输出： John for i in &apos;Hicoder&apos;: if i == &apos;d&apos;: continue print(i) # 输出： # H # i # c # o # e # r 嵌套包括if嵌套，循环结构嵌套，if与while和for相互嵌套。 print(&apos;实现一个简单的排序。&apos;) list = [12, 3, 6, 25, -14, 8, 68] print(&apos;排序前的列表：&apos;) print(list) # [12, 3, 6, 25, -14, 8, 68] listLen = len(list) for i in range(listLen-1): for j in range(i+1, listLen-1): if list[i] &gt; list[j]: list[i], list[j] = list[j], list[i] print(&apos;排序后的列表：&apos;) print(list) # [-14, 3, 6, 8, 12, 25, 68] ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——控制流之if判断语句]]></title>
      <url>%2F2018%2F08%2F02%2Fpython-rumenjiaochengkongzhiliuzhiifpanduanyuju%2F</url>
      <content type="text"><![CDATA[定义控制流（control flow）：条件代码 + 代码块。让程序按照一定的流程（逻辑）运行。 编程语言的代码均优先按照从上往下的顺序运行，遇到控制流则按相应条件运行。 简单理解控制流：如果条件满足，则执行相应的代码块，否则执行其他代码块。 代码块：同级的多条代码放在一起构成代码块。 Python中通过缩进来明确层级关系。相同缩进的代码为同级。 控制流分类 if（判断） for（循环） while（循环） break（跳出） continue（继续） ··· if判断语句对于if 语句，当某一个条件（condition）满足时，即条件（condition）为真（True），则执行相应下级代码块（code block）: if True: print(&apos;我被执行了&apos;) if语句分类 1、if (condition): (code block) # if嵌套 2、if (condition): (code block) else: (code block) 3、if (condition1): (code block) elif (condition2): (code block) ... else: (code block) if 语句的中文解释： 1、如果（条件）： （代码块） 2、如果（条件）： （代码块） 否则： （代码块） 3、如果（条件1）： （代码块） 否则如果（条件2）： （代码块） 否则如果（条件3）： （代码块） ··· 否则： （代码块） if代码示例——判断是否成年print(&apos;看看你成年了没！&apos;) age = int(input(&apos;请输入你的年龄：&apos;)) print(&apos;&apos;) if age &lt; 18: print(&apos;对不起，你还没有成年！&apos;) elif age &lt; 22: print(&apos;对不起，你已成年，但未达到法定结婚年龄。&apos;) else: print(&apos;成年人，如果单身，请尽早结婚！&apos;) 将上述代码保存到 if.py 文件中，用IDLE运行。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——数据类型之字典]]></title>
      <url>%2F2018%2F08%2F02%2Fpython-rumenjiaochengshujuleixingzhizidian%2F</url>
      <content type="text"><![CDATA[Dictionary类型即字典。用 {} 表示，用来存储键/值对。 定义# 定义一个空字典 dic = {} # 定义一个字典并初始化 dict = {&apos;name&apos;: &apos;python book&apos;, &apos;price&apos;: &apos;$19.9&apos;, &apos;pages&apos;: 888} 上述代码，name、price、pages为键，python book、$19.9、888为值。 键一旦定义便不可以更改，可以用数字、字符串、元组等不可变类型充当，不能用列表。值是可以修改的。每个键对应一个值，一个字典中的键不可以重复，如重复只保留最后一个键值对。 list_dic = {[&apos;name&apos;]: &apos;John&apos;, &apos;age&apos;: 28} # TypeError: unhashable type: &apos;list&apos; # 列表充当键，出错 访问字典里的值字符串、元组、列表使用下标索引访问值，字典通过键访问值。 dict = {&apos;name&apos;: &apos;python book&apos;, &apos;price&apos;: &apos;$19.9&apos;, &apos;pages&apos;: 888} print(dict[&apos;name&apos;]) # IDLE中输出 python book 增加键值对、修改、删除键值对dict = {&apos;name&apos;: &apos;python book&apos;, &apos;price&apos;: &apos;$19.9&apos;, &apos;pages&apos;: 888} # 增加 dict[&apos;publish&apos;] = &apos;2018-3-15&apos; print(dict) # {&apos;name&apos;: &apos;python book&apos;, &apos;price&apos;: &apos;$19.9&apos;, &apos;pages&apos;: 888, &apos;publish&apos;: &apos;2018-3-15&apos;} # 修改 dict[&apos;name&apos;] = &apos;learn Python&apos; print(dict) # {&apos;name&apos;: &apos;learn Python&apos;, &apos;price&apos;: &apos;$19.9&apos;, &apos;pages&apos;: 888, &apos;publish&apos;: &apos;2018-3-15&apos;} # 删除 del dict[&apos;pages&apos;] print(dict) # {&apos;name&apos;: &apos;learn Python&apos;, &apos;price&apos;: &apos;$19.9&apos;, &apos;publish&apos;: &apos;2018-3-15&apos;} # 清空字典 dict.clear() print(dict) # {} # 删除字典 del dict # 求字典长度 len(dict) ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端全栈开发要学哪些技术？]]></title>
      <url>%2F2018%2F08%2F01%2Fqianduanquanzhankaifayaoxuenaxiejishu%2F</url>
      <content type="text"><![CDATA[目录1、什么是全栈开发者？ 2、成为一个全栈开发者需要具备哪些技术？ 3、具体学习进阶指南 入门篇 进阶篇 项目篇 ​ 1、什么是全栈开发者？ 全栈开发者是指同时具备前端、后端和移动端技术的开发人员。 前端通常是指应用程序中用户所看到或将交互的部分。 后端是指应用程序中处理逻辑、数据库交互、用户认证、服务器配置的部分。 移动端，顾名思义是指手机等移动终端开发技术，在web开发中主要包括移动端界面和交互部分。 全栈工程师是指掌握多种技能，并能利用多种技能独立完成产品的人。也叫全端工程师(同时具备前端和后台能力)，英文Full Stack developer。——引自百度百科 2、成为一个全栈开发者需要具备哪些技术？依据全栈开发者定义，我们不难确定其所需具备的技术点。 首先得具备前端技术，包括但不限于HTML、CSS、Javascript（ES6等）、浏览器相关知识（如BOM、兼容性等）、文档对象模型（DOM） 等 其次得具备后端技术，包括但不限于Linux知识、服务器相关知识（Apache、Nginx、IIS等）、数据库技术（SQL、MySQL、postgresql，mongodb、redis等）、后端编程语言（PHP、Python、Java）、RESTful API、web存储、Http知识 等 3、具体学习进阶指南入门篇前端技术入门易，精通难。这里给大家奉上入门指南，供大家参考。 （1）HTML/CSS 这两者为web的基石，要学习web开发技术，必先学习二者。简单地说，HTML用来给网站添加内容，CSS则是给内容添加样式使其美观 掌握HTML标签，必须掌握的常用标签：div, p, a, h1-h6, span, table, ul, ol, dl, form, input, button, img, audio, video等。 掌握HTML标签的属性，HTML标签可以设置属性。下面四个适用于大多数标签： class 为html元素定义一个或多个类名（classname）(类名从样式文件引入) id 定义元素的唯一id style 规定元素的行内样式（inline style） title 描述了元素的额外信息 (作为工具条使用) CSS使用方法，外部样式表引用（link标签）、内部样式（style标签）、内联样式（style属性）。 外部样式： &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; &lt;/head&gt; 内部样式： &lt;style&gt; hr {color:sienna;} p {margin-left:20px;} body {background-image:url(&quot;images/back40.gif&quot;);} &lt;/style&gt; &lt;/head&gt; 内联样式： &lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt; 掌握CSS选择器，最简单的 id 和 class 选择器，其他更复杂同时更高效的选择器，大家自己深入学习，本指南不做详解。 掌握CSS最常用的样式属性（style attribute），背景、文本、链接、图像、表格、表单、列表、边框、边距、显示、浮动、对齐等。 掌握CSS盒模型。必须掌握！ （2）Javascript Javascript是前端开发者必须学习和掌握的编程语言，它是浏览器唯一支持的原生语言。 Javascript使用方法。 HTML内部书写： &lt;script&gt; function myFunction() { document.getElementById(&quot;demo&quot;).innerHTML=&quot;我的第一个 JavaScript 函数&quot;; } &lt;/script&gt; 引入外部文件： &lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt; （3）后端技术 作为入门，你得对后端技术有如下了解： 学习并掌握一门后端编程语言。 Node.js：这是一门基于Javascript的后端语言，选择它意味着你可以不用学习新的语言，可以快速上手。 Ruby：用于web开发的框架有 Rails 和 Sinatra 。 Python：最受欢迎的 web 开发框架有 Django 和 Flask。Python是一门值得学习的语言，它应用广发：数据分析、人工智能、web开发。 Java：现在仍有一些公司使用 Java 作为后端语言。一门经典级的web后端语言。 PHP：网络发展的基石，值得学习。 进阶篇当你掌握了一些基本的前端和后端技术，便可以深入学习了。 （1）前端进阶 综合运用HTML和CSS和Javascript，实现一些小功能，比如网页背景变换、网页课程表显示等。 学习div+css布局，熟练运用盒模型。 学习Ajax技术。 学习一些前端框架，页面布局：Bootstrap、Semantic-ui等，js库和框架：jQuery、React、AngularJS、vue.js。 更深入的，学习 webpack、browserify技术和 glup构建工具。 学习一些测试框架的知识。 （2）后端进阶 深入学习所选的编程语言，实现一些小程序、小功能。 学习并掌握多种后端开发框架，如python的django、flask，PHP的thinkphp，等。 了解常用服务器操作系统并掌握其基本操作（Linux的常用命令及程序安装、服务器web配置、数据库配置等），市场上现有的服务器主要采用Linux系统（Ubuntu、Centos等），也有一些Windows server系统。 服务器，也称伺服器，是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。 服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。 在网络环境下，根据服务器提供的服务类型不同，分为文件服务器，数据库服务器，应用程序服务器，WEB服务器等。 ——引自百度百科 了解SQL语言，学习并使用一种数据库，如MySQL、PostgreSql，Mongodb，redis、memcached等。 web存储技术。 HTTP &amp; RESTful HTTP是应用于互联网的一项无状态应用协议——它规范了客户端连接到服务器的行为。你应该学习如下内容： 什么是HTTP，它的应用逻辑？ 什么是REST，它为什么对HTTP协议和web应用来说很重要？ 设计 RESTful API 的最佳实践。 SSL证书是什么？ HTTP/2. WebSocket、Web Worker。 （3）其他技术（为了长远发展，以下技术必学） Git ，版本控制系统。了解其原理，掌握其常用命令。 基本算法和数据结构。 Web应用架构。学习如何高效组织代码，如何分割文件，如何结构化数据库数据，学习应用和浏览器性能优化，掌握 模型-视图-控制器 编程模式（MVC）。 不断实践，不断学习，不断交流。 学习资源链接：https://github.com/JacksonTian/fks]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——数据类型之Set]]></title>
      <url>%2F2018%2F07%2F31%2Fpython-rumenjiaochengshujuleixingzhiset%2F</url>
      <content type="text"><![CDATA[Set集合数据类型，本身就是一个集合。它是无序不重复元素的集合。 什么是Set？与数学中的集合类似，Python中的集合数据类型指的是一系列值（元素）组成的一个集体。我们所有人类是一个集合。中国人是一个集合。 数学中集合的特性： 确定性：一个对象能够确定是不是属于一个集合，如很小的数无法构成一个集合，因为具有不确定性。 互异性：即集合中任意两个对象都是不同的。也就是集合中不存在重复的对象。 无序性：{a, b, c}与{b, c, a}是同一个集合。 纯粹性：一个集合中的所有对象必须具备一个共同的属于该集合的特征。 完备性：一个集合必须包含所有符合集合共同特征的对象。 Python中的集合使用大括号 {} 或者 set() 函数来创建一个集合。注意：创建一个空集合必须使用 set()，因为 {} 用来创建一个空字典。初始化一个集合必须用List、Tuple、String。 特性 互异性：不存在重复元素。 无序性。 因其无序性，集合不支持下标索引以及切片来进行取值、修改值、删除值操作 定义一个集合 example = set([1, 2, 3]) # 用列表初始化集合 print(example) # {1, 2, 3} 注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。 自动过滤重复元素 set1 = set([&apos;apple&apos;, &apos;banana&apos;, &apos;apple&apos;, &apos;pear&apos;, &apos;orange&apos;, &apos;banana&apos;]) print(set1) # 将自动过滤重复元素 # {&apos;apple&apos;, &apos;pear&apos;, &apos;orange&apos;, &apos;banana&apos;} Set的基本操作基本运算 与数学中的集合操作类似，可做并集、交集等运算。 in和not in：成员运算符。判断元素与集合的包含与不包含关系。 ==和!=：判断等于与不等于。 &lt;：判断绝对子集关系。 &lt;=：判断非绝对子集关系。 ：判断绝对超集关系。 =：判断非绝对超集关系。 &amp;：求交集。 |：求并集。 ^：求两个集合共同元素之外的所有元素组成集合。 解释：集合a，集合b。b是a的子集，即b包含于a；如果b不等于（!=）a，则b是a的绝对子集，反过来a是b的绝对超集。 list = [1314, 520, &apos;my love&apos;, &apos;Hi&apos;, &apos;Python&apos;] fir_set = set(list) sec_set = set([520, &apos;Hi&apos;, 3.1415, 88]) # in and not in print(520 in fir_set) # IDLE中输出True # == 判断两个集合的包含关系 print(fir_set == sec_set) # False # &lt; 判断两个集合的包含关系 print({1314, &apos;Hi&apos;} &lt; fir_set) # True # &gt;= 判断两个集合的包含关系 print(fir_set &gt;= sec_set) # False # &amp; 求两个集合都包含的元素 print(fir_set &amp; sec_set) # {520, &apos;Hi&apos;} # | 求两个集合所包含的所有元素，自动去除重复元素 print(fir_set | sec_set) # {1314, &apos;Hi&apos;, 520, 3.1415, &apos;Python&apos;, 88, &apos;my love&apos;} # ^ 求两个集合共同元素之外的所有元素 print(fir_set ^ sec_set) # {1314, 3.1415, 88, &apos;my love&apos;, &apos;Python&apos;} 内置函数 add()：增加新的元素，新增元素的位置随机。 update(seq)：用序列（String、List、Tuple）更新集合，序列中的每个元素都被添加到集合中。 remove(element)：删除集合中的元素。 len(set)：求集合中元素个数。 clear()：清空集合中的元素，集合变为空集合。 s = {133, &apos;522&apos;, &apos;你好&apos;, 568} print(type(s)) # &lt;class &apos;set&apos;&gt; 表示是集合类型 s.add(1000) print(s) # {&apos;522&apos;, &apos;你好&apos;, 133, 1000, 568} s.update((12, &apos;Hi&apos;)) print(s) # {133, &apos;你好&apos;, 1000, &apos;Hi&apos;, &apos;522&apos;, 12, 568} s.remove(568) print(s) # {133, &apos;Hi&apos;, &apos;522&apos;, 1000, 12, &apos;你好&apos;} print(len(s)) # 6 s.clear() print(s) # set() 不去实践，永远做不成一件事。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——数据类型之元组]]></title>
      <url>%2F2018%2F07%2F30%2Fpython-rumenjiaochengshujuleixingzhiyuanzu%2F</url>
      <content type="text"><![CDATA[元组与列表比较相似，都是有序的集合，不同之处在于元组中的元素值是不允许修改的。 元组用小括号 () 表示。列表使用 []表示。 与列表一样，括号中的值用逗号隔开。另外特别需要注意：当元组中只有一个值时，其后也要加上逗号，否则括号会被当作运算符进行操作。 # 定义一个元组 tup = (12, 34, 56, 82, 94, &apos;hello&apos;) tup1 = (1314,) # 创建一个空元组 tup2 = (); # 读取元组中的值 # 利用下标索引读取元组中的某个值，得到一个值 print(tup[5]) # hello # 利用切片读取元组的一部分，得到的依然是元组 print(tup[1:]) # (34, 56, 82, 94, &apos;hello&apos;) # 元组的组合 利用 + 运算符 # 元组最大的特性：元组一旦创建完毕并且初始化（赋好了值），那就不可单独修改某个值 # 元组间可以组合生成新的元组，元组重新赋值 tup3 = tup + tup1 print(tup3) # (12, 34, 56, 82, 94, &apos;hello&apos;, 1314) # 删除元组 # 使用del语句进行删除 del tup3 # 删除tup3，tup3整个不存在了 # 重复元组 利用 * 运算符 tup4 = (&apos;hi,python&apos;,) print(tup4*3) # (&apos;hi,python&apos;, &apos;hi,python&apos;, &apos;hi,python&apos;) # 求元组的长度，同列表利用len()函数 tup_len = len(tup) print(tup_len) # tup的长度为6 # tuple(list) 将列表转换为元组 list = [12, &apos;hi&apos;, 3.1415, 99] tup5 = tuple(list) print(tup5) # (12, &apos;hi&apos;, 3.1415, 99) 将上面代码保存到 tuple.py 文件中，通过IDLE运行得到如下结果： hello (34, 56, 82, 94, &apos;hello&apos;) (12, 34, 56, 82, 94, &apos;hello&apos;, 1314) (&apos;hi,python&apos;, &apos;hi,python&apos;, &apos;hi,python&apos;) 6 (12, &apos;hi&apos;, 3.1415, 99) 赶紧动手试试吧！ ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——数据类型之 List 类型]]></title>
      <url>%2F2018%2F07%2F29%2Fpython-rumenjiaochengshujuleixingzhi-list-leixing%2F</url>
      <content type="text"><![CDATA[List，翻译成中文就是列表的意思。 什么是列表？正式点的解释：List是一种有序集合。 通俗点：许多值（变量）按照一定顺序放到一个篮子里，这个篮子就是 []。 即列表用中括号 []表示，[] 中放的每个值用逗号（英文逗号）隔开。 注意：写代码时请将输入法调为英文半角状态 举例：家里所有人的称呼，构成一个列表 family = [&apos;father&apos;, &apos;mother&apos;, &apos;son&apos;, &apos;daughter&apos;] print(family) # family 就是一个列表 # IDLE中运行后输出 [&apos;father&apos;, &apos;mother&apos;, &apos;son&apos;, &apos;daughter&apos;] 列表作为一个集合，是有长度的，同字符串，我们可以使用 len() 这个函数来获取列表长度。 family = [&apos;father&apos;, &apos;mother&apos;, &apos;son&apos;, &apos;daughter&apos;] # 定义列表 print(len(family)) # IDLE中运行后输出 4 列表的基本操作读取列表中的值与字符串类似，列表可通过下标（索引）和切片的方式读取其值。 loveList = [520, 1314, &apos;my love&apos;, &apos;my queen&apos;] print(loveList[3]) # 读取loveList的第4个值 # my queen # 切片 print(loveList[1:]) # 读取loveList第二个值到最后一个值 # [1314, &apos;my love&apos;, &apos;my queen&apos;] 修改列表利用下标的方式读取并更改值。上一节讲过，字符串是无法修改值的。 numList = [2, 4, 6, 8, 10, 12, 14, 16, 18] numList[2] = 100 # 将numList的第三个值6修改为100 print(numList) # [2, 4, 100, 8, 10, 12, 14, 16, 18] 删除列表中的元素这里使用 del 语句进行删除。 numList = [2, 4, 6, 8, 10, 12, 14, 16, 18] del numList[4] # 删除numList的第五个值10 print(numList) # [2, 4, 6, 8, 12, 14, 16, 18] 对数值型列表进行排序所谓数值型，即列表中的值全部为数字（整数or实数）。我们使用 sorted() 来进行排序，该函数不改变原列表的值。 numList1 = [95, 2, 45, 17, 9, 168, 11] print(sorted(numList1)) # [2, 9, 11, 17, 45, 95, 168] print(numList1) # [95, 2, 45, 17, 9, 168, 11] 对数值型列表求和利用 sum() 函数进行。该函数不改变原列表的值。 moneyList = [4000, 3500, 5500, 8000, 12000, 30000] print(sum(moneyList)) # 63000 +、*、成员运算符 +：将两个或多个列表组合起来。[1, 3, 5] + [2, 4, 6]，得到[1, 2, 3, 4, 5, 6] ：重复列表。[1, 2, 3] 3，得到[1, 2, 3, 1, 2, 3, 1, 2, 3] in 与 not in：判断值是否在列表中。2 in [1, 2, 3, 4]，返回True。 注意：+是将两个列表组合，即两个列表中的值按照一定顺序全部放在一个新的列表中。 列表嵌套即多个列表放到一个列表中。 a = [1, 5, 99] b = [3.14, &apos;你好&apos;] n = [a, b] # 此时n可以看作一个二维数组，由此类推还有三维、四维 print(n) # [[1, 5, 99], [3.14, &apos;你好&apos;]] print(n[0]) # 获取列表n的第一个值[1, 5, 99] # [1, 5, 99] print(n[0][1]) #获取列表n的第一个值[1, 5, 99]中的第二个值 # 5 专属列表的函数 append(obj)：在列表尾部添加新的对象obj（新添加一个值）。 count(obj)：计算对象obj在列表中出现的次数。 pop(index=-1)：读取并删除index（下标索引）位置的值，默认为最后一个值。 reverse()：获得反向列表。 extend(seq)：把序列seq的内容添加到列表中。 index(obj)：从列表中找出某个值第一个匹配项的索引位置。 insert(index, obj)：将对象插入到指定下标索引（index）位置。 remove(obj)：将对象obj从列表中删除。 list.clear()：清空列表。 list.copy()：复制列表。 list.sort(func=None,key=None,reserve=False)：以指定方式排序列表中的成员。 func — 可选参数, 如果指定了该参数会使用该参数的方法进行排序。 key — 主要是指定用来进行比较的元素，可不指定，不指定则按默认。 reverse — 排序规则，reverse = True 降序， reverse = False 升序（默认）。 list = [2, 6, 8, 19, 14, 6, 18, 2, 6] list.append(22) print(list) # [2, 6, 8, 19, 14, 6, 18, 2, 6, 22] print(list.count(6)) # 3 list.pop(2) # 删除下标为2的元素（值） print(list) # [2, 6, 19, 14, 6, 18, 2, 6, 22] list.insert(2, 8) # 在下标为2的位置插入8 print(list) # [2, 6, 8, 19, 14, 6, 18, 2, 6, 22] list.sort() # 按默认进行排序 print(list) # [2, 2, 6, 6, 6, 8, 14, 18, 19, 22] 练一练将上面的代码依次复制保存到几个文件中，在IDLE中运行看看结果吧。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一些好看的 WorldPress 主题推荐]]></title>
      <url>%2F2018%2F07%2F28%2Fyixiehaokande-worldpress-zhutituijian%2F</url>
      <content type="text"><![CDATA[首先当然是本站正在用的欲思主题啦。 主题特色 兼容 IE9+、谷歌 Chrome 、火狐 Firefox 等主流浏览器 扁平化+响应式设计，兼容电脑、平板和手机访问 主题设置面板新增多种广告位，PC端和移动设备各不相同 自带7+小工具，可随意设置侧栏分类和浮动块。 基本SEO：首页、分类、文章等页面都可以设置关键词和描述 内置实用功能：Ajax加载分页、垃圾广告拦截、缓存头像、社交账户图标等 短代码包括dm和dl、gt等,可自主选择。 首页导航、最新消息和置顶推荐+热门排行 顶面菜单炫酷切换，文章页顶部面包屑导航可隐藏或开启 最新消息可以后台配置任意HTML代码 首页内置炫酷的幻灯滑块，可自由开启，添加置顶文章后即可预览 热门排行显示读者的最爱，评论和喜欢并排显示 文章列表展示效果 缩略图+文字排版 分类链接醒目展示，可点击图标订阅栏目 排版简洁清爽，鼠标切换图标放大特效，图片后台设置隐藏 搜索、订阅、社交 + 喜欢+分享 + 回顶部和去评论 搜索结果增加关键词高亮显示 增加多种社交账户图标，微博、Facebook、Twitter、qq、随意隐藏显示 为你喜欢的文章点赞，无处不喜欢 分享无处不在，各种页面、各种文章 回顶部自动隐藏，在有评论的时候才会有去评论 侧栏小工具：邮箱订阅+标签云+特别推荐等 文章加吐槽随意控制，可控制显示条数和具体分类，还可选择排序方式 邮箱订阅收集你的读者群，及时推送最新的资讯。 标签云并排展示，颜色多种变化 个性广告随意添加，还可以控制浮动个数 特别推荐标题颜色风格多种选择 关于读者墙、友情链接、投稿页面 独立的读者墙页面，漂亮的展示方式，鼠标滑过头像旋转和显示评论数 带头像的友情链接页面，更加有个性。 接受读者投稿是不错的选择 文章结尾和相关文章推荐 文章结尾有加转载说明、喜欢、分享、标签、上下页 图文排列的相关文章推荐，后台可设置数量 其他推荐xintheme 的主题也非常值得推荐，该站所有主题都很简约、清新，个人觉得制作者审美绝对杠杠的。我的另一个站 本源空间 也在使用他家的一个主题。 其他还有 主题公园、主题猫、主题之家之类的网站也提供很多免费主题。 最直接找主题的地方莫过于 官方主题 。 相信大家多找找一定能找到自己喜欢的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程—— 字符串（String）]]></title>
      <url>%2F2018%2F07%2F27%2Fpython-rumenjiaocheng-zifuchuanstring%2F</url>
      <content type="text"><![CDATA[String字符串数据类型字符串是由零个及以上的字符组成的有限序列。使用引号（’或”）来创建字符串。 str = &apos;This is String&apos; str2 = &quot;asdfhjldfasl&quot; str3 = u&apos;我是汉字&apos; 字符串一般可分为两类：一类是普通的字符串，只用引号声明；另一类是Unicode字符串，在引号之前加上字母u。 技巧：如果字符串中包含汉字，应将其声明为Unicode字符串。 如何访问字符串中的值？ 对于每个字符串，默认从左边开始第一个字符给定序号为0（称为下标或索引），往右序号递增。如： &apos;hello world&apos; # 012345678910 一共十一个字符，包含一个空格 因此，我们可通过下标来访问字符串中的每个字符。 var = &apos;hello world&apos; var2 = var[2] print(var2) # IDLE屏幕打印出 l 通过切片操作访问字符串中的部分内容。 切片就是字面意思，从整体切一部分 var = &apos;hello world&apos; var3 = var[3:6] # [3:6] 表示从下标3开始取，取到下标5（6-1） print(var3) # IDLE屏幕打印出 lo 注意后面还有一个空格 字符串更新如果需要更新字符串，原字符串无法被修改，需要新建一个新的字符串。 str1 = str2 = &apos;hello world!&apos; str1 = str1 + &apos; I like Python!&apos; print(str1) # IDLE屏幕打印出 hello world! I like Python! Python转义字符一些不可显示的字符，如回车、缩进等，用转义字符来表示。以 \ 标识。 \（在行尾）：续行符 \\：反斜杠 \ \’：单引号 \”：双引号 \a：响铃 \b：退格（Backspace） \n：换行 \r：回车 \t：水平制表符（跳到下一个Tab位置） \v：垂直制表符 \0：空字符 字符串运算 +：两个字符串相加，将两个字符串拼接。 str1 = &apos;hello&apos; str2 = &apos;world&apos; str1 + str2 = &apos;helloworld&apos; *：一个整型数字与字符串相乘，重复输出字符串。 str1 = &apos;hello&apos; print(&apos;str1*3: &apos; + str1*3) # str1*3: hellohellohello []、[:]：下标索引和切片。 in：成员运算符 - 如果字符串中包含给定的字符返回 True not in：成员运算符 - 如果字符串中不包含给定的字符返回 True str = &apos;hello&apos; print(&apos;e&apos; in str) # True %s：将字符串格式化 %c：格式化单个字符 %d：格式化整数 print(&apos;hello %s&apos; % &apos;world&apos;) # hello world 字符串内置函数 count(str, beg=0, end=len(string))：返回str在string中出现的次数，可用beg和end限定搜索范围。 find(str, beg=0, end=len(string))：检测str是否包含在string中，可用beg和end限定搜索范围，找到则返回str，找不到则返回-1。 index(str, beg=0, end=len(string))：同find()，但是找不到str则返回异常。 lower()：转换所有大写字母为小写。 upper()：转换所有小写字母为大写。 len(string)：返回字符串长度。 max(string)：返回字符串 string 中ASCII码最大的字母。 min(string)：返回字符串 string 中ASCII码最小的字母。 其他功能强大的字符串内置函数，查阅官方文档。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WorldPress使用教程-实现友情链接与go跳转和url改造]]></title>
      <url>%2F2018%2F07%2F27%2Fworldpress-shiyongjiaocheng-shixianyouqinglianjieyugotiaozhuanheurlgaizao%2F</url>
      <content type="text"><![CDATA[万千wp主题中，我选中了欲思主题。 安装启用之后，便开始了我的页面改造。 启用链接功能欲思主题默认是没有友情链接这一小工具的，同时WorldPress自带的链接功能被隐藏了，所以我们要将其显现。 将下列代码添加到你所使用的主题的 functions.php： //链接 add_filter(&apos;pre_option_link_manager_enabled&apos;,&apos;__return_true&apos;); 添加好以后，在你的后台左侧链接便显现了，同时在外观小工具里也有了链接小工具，你可以将其用作友情链接啦。 添加go页面跳转很多博客都会使用这样的外部链接跳转提示页面，这样做有利于seo，对搜索引擎更加友好。 下列代码来自 AE博客 与 张戈博客 。使用参考 李峰博客 &lt;?php /** * 自动跳转页面 * @copyright (c) Emlog All Rights Reserved */ //自定义跳转地址 $cars = array( array(&quot;qcloud&quot;,&apos;http://www.qcloud.com/redirect.php?redirect=1001&amp;cps_key=8558139aea55e95d71f488081ba44577&apos;), array(&quot;upyun&quot;,&apos;https://www.upyun.com/league&apos;), array(&quot;trustutn&quot;,&apos;http://c.trustutn.org/s/aeink.com&apos;), array(&quot;gfvps&quot;,&apos;https://www.gfvps.cn/page.aspx?c=referral&amp;u=9023&apos;), array(&quot;360scan&quot;,&apos;http://webscan.360.cn/index/checkwebsite/url/www.aeink.com&apos;) ); if(strlen($_SERVER[&apos;REQUEST_URI&apos;]) &gt; 384 || strpos($_SERVER[&apos;REQUEST_URI&apos;], &quot;eval(&quot;) || strpos($_SERVER[&apos;REQUEST_URI&apos;], &quot;base64&quot;)) { @header(&quot;HTTP/1.1 414 Request-URI Too Long&quot;); @header(&quot;Status: 414 Request-URI Too Long&quot;); @header(&quot;Connection: Close&quot;); @exit; } //通过QUERY_STRING取得完整的传入数据，然后取得url=之后的所有值，兼容性更好 $t_url = htmlspecialchars(preg_replace(&apos;/^url=(.*)$/i&apos;,&apos;$1&apos;,$_SERVER[&quot;QUERY_STRING&quot;])); //此处可以自定义一些特别的外链，不需要可以删除以下5行 foreach($cars as $k=&gt;$val){ if($t_url==$val[0] ) { $t_url = $val[1]; $t_vip = 1; } } //数据处理 if(!empty($t_url)) { //判断取值是否加密 if ($t_url == base64_encode(base64_decode($t_url))) { $t_url = base64_decode($t_url); } //对取值进行网址校验和判断 preg_match(&apos;/^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\/\//i&apos;,$t_url,$matches); if($matches){ $url=$t_url; $title=&apos;页面加载中,请稍候...&apos;; } else { preg_match(&apos;/\./i&apos;,$t_url,$matche); if($matche){ $url=&apos;http://&apos;.$t_url; $title=&apos;页面加载中,请稍候...&apos;; } else { $url = &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;]; $title=&apos;参数错误，正在返回首页...&apos;; } } } else { $title = &apos;参数缺失，正在返回首页...&apos;; $url = &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;]; } ?&gt; &lt;html&gt; &lt;!-- @name:aeink goto @description:AE博客跳转页面 @author:墨渊 @time:2017-09-22 @copyright:AE博客&amp;墨渊 @author url:http://www.aeink.com/791.html @ps:你想删我也拦不住看你自觉性吧！！ --&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot; /&gt; &lt;noscript&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=&apos;&lt;?php echo $url;?&gt;&apos;;&quot;&gt;&lt;/noscript&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;!--[if IE 8]&gt; &lt;style&gt; .ie8 .alert-circle,.ie8 .alert-footer{display:none}.ie8 .alert-box{padding-top:75px}.ie8 .alert-sec-text{top:45px} &lt;/style&gt; &lt;![endif]--&gt; &lt;title&gt;&lt;?php echo $title;?&gt;&lt;/title&gt; &lt;style&gt; body{margin:0;padding:0;background:#E6EAEB;font-family:Arial,&apos;微软雅黑&apos;,&apos;宋体&apos;,sans-serif}.main{position:absolute;left:calc(50% - 200px);top:calc(50% - 13em)}.alert-box{display:none;position:relative;margin:auto;padding:180px 85px 22px;border-radius:10px 10px 0 0;background:#FFF;box-shadow:5px 9px 17px rgba(102,102,102,.75);width:286px;color:#FFF;text-align:center}.alert-box p{margin:0}.alert-circle{position:absolute;top:-50px;left:111px}.alert-sec-circle{stroke-dashoffset:0;stroke-dasharray:735;transition:stroke-dashoffset 1s linear}.alert-sec-text{position:absolute;top:11px;left:190px;width:76px;color:#000;font-size:68px}.alert-sec-unit{font-size:34px}.alert-body{margin:35px 0}.alert-head{color:#242424;font-size:28px}.alert-concent{margin:25px 0 14px;color:#7B7B7B;font-size:18px}.alert-concent p{line-height:27px}.alert-btn{display:block;border-radius:10px;background-color:#4AB0F7;height:55px;line-height:55px;width:286px;color:#FFF;font-size:20px;text-decoration:none;letter-spacing:2px}.alert-btn:hover{background-color:#6BC2FF}.alert-footer{margin:0 auto;height:42px;width:120px}.alert-footer-icon{float:left}.alert-footer-text{float:left;border-left:2px solid #EEE;padding:3px 0 0 5px;height:40px;color:#0B85CC;font-size:12px;text-align:left}.alert-footer-text p{color:#7A7A7A;font-size:22px;line-height:18px} &lt;/style&gt; &lt;/head&gt; &lt;body class=&quot;ie8&quot; style=&quot;&quot;&gt; &lt;div class=&quot;main&quot;&gt; &lt;div id=&quot;js-alert-box&quot; class=&quot;alert-box&quot; style=&quot;display:block&quot;&gt; &lt;svg class=&quot;alert-circle&quot; width=&quot;234&quot; height=&quot;234&quot;&gt;&lt;circle cx=&quot;117&quot; cy=&quot;117&quot; r=&quot;108&quot; fill=&quot;#FFF&quot; stroke=&quot;#43AEFA&quot; stroke-width=&quot;17&quot;&gt;&lt;/circle&gt;&lt;circle id=&quot;js-sec-circle&quot; class=&quot;alert-sec-circle&quot; cx=&quot;117&quot; cy=&quot;117&quot; r=&quot;108&quot; fill=&quot;transparent&quot; stroke=&quot;#F4F1F1&quot; stroke-width=&quot;18&quot; transform=&quot;rotate(-90 117 117)&quot; style=&quot;stroke-dashoffset:-514px&quot;&gt;&lt;/circle&gt;&lt;text class=&quot;alert-sec-unit&quot; x=&quot;100&quot; y=&quot;172&quot; fill=&quot;#BDBDBD&quot;&gt;秒&lt;/text&gt;&lt;/svg&gt; &lt;div id=&quot;js-sec-text&quot; class=&quot;alert-sec-text&quot;&gt; 3 &lt;/div&gt; &lt;div class=&quot;alert-body&quot;&gt; &lt;div id=&quot;js-alert-head&quot; class=&quot;alert-head&quot;&gt; &lt;?php echo $title;?&gt; &lt;/div&gt; &lt;div class=&quot;alert-concent&quot;&gt; &lt;p&gt;一万年太久，只争朝夕&lt;/p&gt; &lt;/div&gt; &lt;a id=&quot;js-alert-btn&quot; class=&quot;alert-btn&quot; href=&quot;&lt;?php echo $url;?&gt;&quot;&gt;立即前往&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;alert-footer clearfix&quot;&gt; &lt;svg width=&quot;46px&quot; height=&quot;42px&quot; class=&quot;alert-footer-icon&quot;&gt;&lt;circle fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; fill=&quot;#7B7B7B&quot; stroke=&quot;#DEDFE0&quot; stroke-width=&quot;2&quot; stroke-miterlimit=&quot;10&quot; cx=&quot;21.917&quot; cy=&quot;21.25&quot; r=&quot;17&quot;&gt;&lt;/circle&gt;&lt;path fill=&quot;#FFF&quot; d=&quot;M22.907,27.83h-1.98l0.3-2.92c-0.37-0.22-0.61-0.63-0.61-1.1c0-0.71,0.58-1.29,1.3-1.29s1.3,0.58,1.3,1.29 c0,0.47-0.24,0.88-0.61,1.1L22.907,27.83z M18.327,17.51c0-1.98,1.61-3.59,3.59-3.59s3.59,1.61,3.59,3.59v2.59h-7.18V17.51z M27.687,20.1v-2.59c0-3.18-2.59-5.76-5.77-5.76s-5.76,2.58-5.76,5.76v2.59h-1.24v10.65h14V20.1H27.687z&quot;&gt;&lt;/path&gt;&lt;circle fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; fill=&quot;#FEFEFE&quot; cx=&quot;35.417&quot; cy=&quot;10.75&quot; r=&quot;6.5&quot;&gt;&lt;/circle&gt;&lt;polygon fill=&quot;#7B7B7B&quot; stroke=&quot;#7B7B7B&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-miterlimit=&quot;10&quot; points=&quot;35.417,12.16 32.797,9.03 31.917,10.07 35.417,14.25 42.917,5.29 42.037,4.25 &quot;&gt;&lt;/polygon&gt;&lt;/svg&gt; &lt;div class=&quot;alert-footer-text&quot;&gt; &lt;p&gt;secure&lt;/p&gt;安全加密 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; function alertSet(e) { document.getElementById(&quot;js-alert-box&quot;).style.display = &quot;block&quot;, document.getElementById(&quot;js-alert-head&quot;).innerHTML = e; var t = 5, n = document.getElementById(&quot;js-sec-circle&quot;); document.getElementById(&quot;js-sec-text&quot;).innerHTML = t, setInterval(function() { //禁止其他网站调用此跳转 //var MyHOST = new RegExp(&quot;&lt;?php echo $_SERVER[&apos;HTTP_HOST&apos;]; ?&gt;&quot;); //if (!MyHOST.test(document.referrer)) { // location.href=&quot;http://&quot; + MyHOST; //} if (0 == t) location.href = &quot;&lt;?php echo $url;?&gt;&quot;; else { t -= 1, document.getElementById(&quot;js-sec-text&quot;).innerHTML = t; var e = Math.round(t / 5 * 735); n.style.strokeDashoffset = e - 735 } }, 970) } &lt;/script&gt; &lt;script&gt;alertSet(&quot;&lt;?php echo $title;?&gt;&quot;);&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 将上面代码复制并保存为一个 index.php 文件丢到网站根目录的 go 文件夹下。到此已经可以实现外链跳转提示了。 但是文章内和评论内的外链无法跳转提示，我们可通过在你所使用的主题的 functions.php 文件中添加如下代码实现： //文章内外链添加go跳转 function the_content_nofollow($content){ preg_match_all(&apos;/&lt;a(.*?)href=&quot;(.*?)&quot;(.*?)&gt;/&apos;,$content,$matches); if($matches){ foreach($matches[2] as $val){ if(strpos($val,&apos;://&apos;)!==false &amp;&amp; strpos($val,home_url())===false &amp;&amp; !preg_match(&apos;/\.(jpg|jepg|png|ico|bmp|gif|tiff)/i&apos;,$val)){ $content=str_replace(&quot;href=\&quot;$val\&quot;&quot;, &quot;href=\&quot;&quot;.home_url().&quot;/go/?url=$val\&quot; &quot;,$content); } } } return $content; } add_filter(&apos;the_content&apos;,&apos;the_content_nofollow&apos;,999); //评论者链接添加go跳转 function add_redirect_comment_link($text = &apos;&apos;){ $text=str_replace(&apos;href=&quot;&apos;, &apos;href=&quot;&apos;.get_option(&apos;home&apos;).&apos;/go/?url=&apos;, $text); return $text; } add_filter(&apos;get_comment_author_link&apos;, &apos;add_redirect_comment_link&apos;, 5); add_filter(&apos;comment_text&apos;, &apos;add_redirect_comment_link&apos;, 99); 去除url中的category一般我们新建了一个分类以后，比如 python，默认的url会显示为 http://你的域名/category/python，但据说这样不利于seo，因此推荐一个插件来将url改为 http://你的域名/python。 插件名：No Category Base (WPML) ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程—— 数字类型（Number）]]></title>
      <url>%2F2018%2F07%2F27%2Fpython-rumenjiaocheng-shuzileixingnumber%2F</url>
      <content type="text"><![CDATA[基本数据类型之数字类型（Number）数字数据类型用于存储数值。 数字数据类型包括整型int、浮点型float、复数complex、布尔值Boolean。 整型：数学里的所有整数，没有小数点，如：0、121、32767、256、627296435、-6786。 浮点型：整数部分+小数部分，如：0.232、2.56、3.1415926，浮点型也可以使用科学记数法，如：3.14e9 = 3.14 _ 10 *_ 9。 复数：实数部分+虚数部分，可以用a + bj，或者complex(a,b)表示，复数的实部a和虚部b都是浮点型。 布尔值：True和False，分别表示1和0。 数字类型转换所谓数字类型转换，即将其他数据类型转换为数字类型，这个转换是有限制的，很显然我们无法将含英文字母的字符串转换为数字类型。 int(x)：将x转换为整型。 float(x)：将x转换为浮点型。 complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。 complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。 练一练a = 26 b = 3.14 x = float(a) y = int(b) print(x) print(y) 将上面代码保存为 Number.py，再IDLE中运行，得到结果如下： 26.0 3 数字类型的运算使用算术运算符进行运算，主要参考前面的文章：http://toutiao.com/item/6578262574251377160/ 相关常用的其他内置函数 abs(x)：返回x的绝对值，x — 数值表达式，可以是整数，浮点数，复数。如：abs(-3)，返回3。 max(x1, x2, x3, x4, …)：返回给定参数的最大值，参数可以是序列。如：max(1, 2, 3, 4)，返回4；max([23, 18, 49, 33])，返回49。 min(x1, x2, x3, x4, x5, …)：返回给定参数的最小值，参数可以是序列。如：min(3, -3, 45, 56)，返回-3。 sum(items[, para])：返回items之和，如果给定了para，则需要再加上para，再返回和。注意：items必须是一个序列，如列表、元组、集合。如：sum((3, 4, 5, 8))，返回20；sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)，返回结果55 + 3 = 58。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程—— 数据类型]]></title>
      <url>%2F2018%2F07%2F27%2Fpython-rumenjiaocheng-shujuleixing%2F</url>
      <content type="text"><![CDATA[数据类型：一类值。 Python中有六个标准数据类型： 数字 Number（整型int、浮点型float、布尔Bool、复数complex） 字符串 String：Python中的字符串用单引号(‘)或双引号(“)括起来。 列表 List：列表是写在方括号([])之间、用逗号分隔开的元素列表。 元组 Tuple：元组写在小括号 () 里，元素之间用逗号隔开。 集合 Set：使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 字典 Dictionary：字典用 { } 创建，它是一个无序的键(key) : 值(value)对集合。 键值对：如字典{‘name’: ‘learn python’, ‘author’: ‘Jack Lin’}中，name为键，learn python为相应的值，两者构成键值对。 六个数据类型举例int: 1, 2, 3, 4, 5, -6, 0 ... float: 1.0, 3.4, -5.6 ... bool: True(1), False(0) complex: 4 + 3j string: &apos;a&apos;, &apos;aaa&apos;, &apos;Hello&apos;, &apos;你好&apos;, &apos;11 cats&apos; 空字符串：str = &apos;&apos; list: list = [1, 2323, &apos;abcde&apos;, 18.8] 空列表：list1 = [] tuple: tuple = (&apos;qwer&apos;, 2324, 4.56) 空元组：tup1 = () set: imset = {&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;} 或 set(&apos;helloworld&apos;) 空集合：set() dictionary: dict = {&apos;name&apos;: &apos;learn python&apos;, &apos;author&apos;: &apos;Jack Lin&apos;} 空字典：dict1 = {} Python注释程序设计语言中的注释：给人看的内容，计算机不执行。 Python中的注释有单行注释和多行注释： 单行注释以 # 开头，例如： # 我是单行注释 print(&quot;Hello, World!&quot;) 多行注释用三个单引号 ‘’’ 或者三个双引号 “”” 将注释括起来，例如: &apos;&apos;&apos; 这是三个单引号括起来的多行注释 这是三个单引号括起来的多行注释 这是三个单引号括起来的多行注释 &apos;&apos;&apos; print(&quot;Hello, World!&quot;) &quot;&quot;&quot; 这是三个单引号括起来的多行注释 这是三个单引号括起来的多行注释 这是三个单引号括起来的多行注释 &quot;&quot;&quot; print(&quot;Hello, World!&quot;) print() 函数用于打印输出。 type() 函数可以用来查询变量所指的对象类型。如 type(1) 结果为 ，即整型 练一练在 IDLE 中依次输入运行下面这些代码，看看有什么效果。 整型 print(1) 浮点型 print(1.356) 字符串 print(&apos;hello xiaoming&apos;) print(&apos;你好中国&apos;) 列表 print([1, 2323, &apos;abcde&apos;, 18.8]) 元组 print((&apos;qwer&apos;, 2324, 4.56)) 集合 print({&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;}) 字典 print({&apos;name&apos;: &apos;learn python&apos;, &apos;author&apos;: &apos;Jack Lin&apos;}) type() type(123) type()函数可多尝试一下，如 type(‘你好中国’)，type({1,2,3}) 等等。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程—— 位运算符]]></title>
      <url>%2F2018%2F07%2F26%2Fpython-rumenjiaocheng-weiyunsuanfu%2F</url>
      <content type="text"><![CDATA[位运算符我们平时计算用的1、2、3、4、5、23、4654这些是十进制数，而在计算机技术中，使用最广泛的是二进制数，即由0和1组成的。位运算则是用二进制数来进行计算的。 二进制与十进制的转换 二进制转换为十进制： 十进制转换为二进制： &amp; 按位与运算符：参与运算的两个值,如果两个相应二进位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a | b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 > 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 a 为 60，b 为 13二进制格式如下： a = 0011 1100 b = 0000 1101 ----------------- a&amp;b = 0000 1100 a|b = 0011 1101 a^b = 0011 0001 ~a = 1100 0011 练一练a = 60 # 60 = 0011 1100 b = 13 # 13 = 0000 1101 c = 0 c = a &amp; b; # 12 = 0000 1100 print (&quot;1、 c 的值为：&quot;, c) c = a | b; # 61 = 0011 1101 print (&quot;2、 c 的值为：&quot;, c) c = a ^ b; # 49 = 0011 0001 print (&quot;3、 c 的值为：&quot;, c) c = ~a; # -61 = 1100 0011 print (&quot;4、 c 的值为：&quot;, c) c = a &lt;&lt; 2; # 240 = 1111 0000 print (&quot;5、 c 的值为：&quot;, c) c = a &gt;&gt; 2; # 15 = 0000 1111 print (&quot;6、 c 的值为：&quot;, c) 将上面代码保存到 bitOperator.py，再IDLE中运行结果如下： ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程—— 身份运算符和成员运算符]]></title>
      <url>%2F2018%2F07%2F26%2Fpython-rumenjiaocheng-shenfenyunsuanfuhechengyuanyunsuanfu%2F</url>
      <content type="text"><![CDATA[身份运算符所谓身份运算符就是比较两个变量（两个名字）是否来自同一个对象（同一个人）。 is：x is y，如果x和y是来自同一个对象，则返回True，否则返回False。 is not：x is not y，如果x和y不是来自同一个对象，则返回True，否则返回False。 练一练a = 10 b = 10 print(a is b) b = 15 print(a is not b) 将上面代码保存为 identityOperator.py，在IDLE中运行结果如下： 成员运算符用来查找某个变量的值是否在给定的序列中，主要用在字符串、元组和列表。 in：A in B，判断序列B中是否有A，有则返回True，否则返回False。 not in：A not in B，判断序列B中是否有A，没有则返回True，否则返回False。 练一练a = 56 b = [12, 34, 56, &apos;hi&apos;] print(a in b) c = &apos;hello&apos; print(c not in b) 将上面代码保存为 memberOPerator.py，在IDLE中运行结果如下： ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[推荐 11 个实用的 JavaScript 库]]></title>
      <url>%2F2018%2F07%2F26%2Ftuijian-11-geshiyongde-javascript-ku%2F</url>
      <content type="text"><![CDATA[作者 | Jonathan Saring 编辑 | 无明 JavaScript 仍然是 2018 年最受欢迎和使用最为广泛的编程语言，因此 JavaScript 生态系统也会继续发展壮大。 然而，JavaScript 的标准库仍然继续保持“短小精悍”的身材。为了填补标准库功能方面的空白，在过去几年中，GitHub 上出现了很多流行的 JavaScript 库。以下列出了 11 个有用的库，这些库的维护状态均很活跃。 1.Underscore 和 Lodash（dah）可能大多数人都知道这两个库。Underscore 的目的是为 JavaScript 中的常见任务提供实用的函数。Lodash 是下载量最大和被依赖最多的库之一，旨在为数组、字符串、object 和 argument 对象提供更一致的跨环境迭代支持，并已成为 Underscore 的超集。这两个库由相同的核心贡献者维护，在技术选型时完全可以考虑使用它们。 Lodash - https://github.com/lodash/lodash Underscore - https://github.com/jashkenas/underscore 2. Ramda在 GitHub 上的 Star 已经超过 12,000，这个库专为函数式编程而设计，可以轻松创建不改变用户数据状态的函数式管道。Ramda 的核心设计理念是创建具有不变性和无副作用的函数。所有的函数会被自动柯里化，并根据易用性安排参数的顺序。 Ramda - https://github.com/ramda/ramda 3. MathJS在 GitHub 上的 Star 已经超过 6000，这个库是 JavaScript 和 Node.js 的数学扩展库，与 JavaScript 内置的 Math 库兼容。该库包含一个灵活的表达式解析器，能够运行符号计算，并提供了一系列内置函数和常量。用户还可以对其进行扩展。 MathJS - https://github.com/josdejong/mathjs 4. Moment在 GitHub 上的 Star 已经超过 37,000，是一个 JavaScript 日期和时间操作库，用于解析、验证、操作和格式化日期。Moment 可以在浏览器和 Node.js 中运行。从 2.10.0 版本开始迁移到 ECMAScript 6。 Moment - https://github.com/moment/moment 另外两个同类的库： Date-fns（10,000 个 Star）- https://github.com/date-fns/date-fns DateJS - https://github.com/datejs/Datejs 5. Sugar在 GitHub 上的 Star 已经超过 3500，主要用于处理本地对象。这个库支持自定义构建，还提供了模块化的 npm 包，因此可以只使用其中必要的部分模块（也可以与 Bit 结合使用），用户还可以通过自定义方法或使用插件来应对特定的使用场景。 Sugar - https://github.com/andrewplummer/Sugar 6. Lazy在 GitHub 上的 Star 将近 5000，是一个功能强大的 JavaScript 库，它的 lazy 引擎“尽可能地少做一些工作”，同时保持足够的灵活性。 Lazy - https://github.com/dtao/lazy.js 7. CollectJS在 GitHub 上的 Star 超过 3200，主要用于处理 JavaScript 中的数组和对象，无需其他依赖，提供了几十个有用的功能和 API，这些 API 几乎与 Laravel Collections 5.5 相同。该库的维护状态很活跃，值得关注。 CollectJS - https://github.com/ecrmnn/collect.js 8. ChanceJSChance 在 GitHub 上的 Star 超过 3200，一个简单的随机对象生成器，用于生成随机的字符串、数字等。在编写自动化测试代码或任何需要随机对象的地方，可以用它来减少单调的工作。 ChanceJS - https://github.com/chancejs/chancejs 9. ChartJS在 GitHub 上的 Star 将近 40,000 个，提供了 8 种不同类型的数据可视化，每种类型都支持动画和定制。借助 Chart.js，我们可以使用标签创建简单的HTML5图表，而且在所有现代浏览器中都具有出色的渲染性能。 ChartJS - https://github.com/chartjs/Chart.js 10. Polished在 GitHub 上的 Star 超过 3500 个，由 styled-components 团队开发，是一个非常优秀的轻量级工具集，支持使用 JavaScript 编写具有 SASS 风格辅助函数和 mixin 的样式。该库与 styled-components、Aphrodite、Radium 或简单的内联样式兼容。这个库可以在 GitHub 上找到，Bit 社区（非官方）也单独提供所有的功能，因此可以单独安装、导入和使用。 Polished - https://github.com/styled-components/polished Bit 社区提供的单独安装版 - https://bitsrc.io/ranm8/polished 11. MoutMout.js 是一组模块化的 JavaScript 库，可以在浏览器或 node.js 中运行，提供类似于其他语言标准库（Python、Ruby、PHP 等）中的辅助方法。mout.js 允许仅加载必需的模块或函数，并提供了一致的 API，规范了跨浏览器行为。 Mout - https://github.com/mout/mout 特别推荐Bit utils一个模块化和高性能的库，已经被用在 Bit 的 web hub 中。这些函数可使用 NPM/Yarn 进行单独安装，用户也可以创建自己的集合，并从不同的库和项目中收集有用的功能。 Bit utils - https://bitsrc.io/bit/utils Voca一个用于操作字符串的 JavaScript 库。它提供的功能包括大小写转换、trim、pad、slugify、latinise、sprintf、truncate、escape 等。用户可以加载单个函数，以便最小化应用程序的构建。该库具有很高的测试覆盖率，并且不依赖其他库。 Voca - https://github.com/panzerdp/voca Licia只有 400 个 Star，这个有趣的项目基本上是一个简单但有用的 JavaScript 片段集合，具有很高的测试覆盖率，文档也很齐全。 Licia - https://github.com/liriliri/licia 转载自：https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651008390&amp;idx=2&amp;sn=923cb2a6fbc462df766ab5f4b0478494&amp;chksm=bdbed5d58ac95cc399cd688089f126fcdc1b69f5f18b8458a77363c58b58fddea3ae063e221f&amp;mpshare=1&amp;scene=1&amp;srcid=0726Om0cqDIm89SDKpjj1AuO#rd]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何获取微信文章封面图？]]></title>
      <url>%2F2018%2F07%2F26%2Fruhehuoquweixinwenzhangfengmiantu%2F</url>
      <content type="text"><![CDATA[第一步，你看上了某篇文章的封面；然后你打开了这篇文章，很失望，正文里没有图片！！没关系，我们偏要获得这张图！ 第二步，在微信里打开这篇文章，获得链接。 第三步，将复制的链接，在电脑浏览器中打开。 第四步，在网页上，点击鼠标右键，选择“查看源代码（或源文件）”。 第五步，在打开的原文件中，按 Ctrl+F，调出搜索框，在框中输入“var msg”,回车。 第六步，找到 var msg_cdn_url ，将其后的网址复制到浏览器中打开便能得到封面图啦！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《经济学人》 也谈 Python：它会是我们的未来吗？]]></title>
      <url>%2F2018%2F07%2F26%2Fjingjixueren-yetan-pythontahuishiwomendeweilaima%2F</url>
      <content type="text"><![CDATA[作者：OSC-达尔文 来源：开源中国（oschina2013） 转载请在文中注明来源和作者 经济学人发表了一篇文章谈论了 Python 语言及其社区，以及刚刚辞职的终身仁慈独裁者 Guido van Rossum。 1989 年 12 月，荷兰计算机科学家 van Rossum 定下了一个圣诞节目标，创造出一种易于阅读和易于创建和分享模块的编程语言。他以英国喜剧团体 Monty Python 的名字将其命名为 Python 语言。 30 年后的今天，van Rossum 发现自己无意中变成了电影《布莱恩的一生》中的弥赛亚。他说自己创造的语言肯定不是为大众消费而设计的。但美国用户在 Google 上搜索 Python 的频率比真人秀电视明星金·卡戴珊还要高。 Python 热度激增 根据 Stack Overflow 的一项调查显示，Python 不仅在专业领域的使用率得到增长，在普通开发上的使用率也有所提升，有 40% 的受访者表示他们现在正在使用 Python，有 25% 的受访者表示希望学习 Python。 Codecademy 是一个编程语言使用与教学网站，该网站表示，到目前为止，学习 Python 的需求增长最快。Python 开发者已经为这个世界贡献了 145,000 个安装包，涵盖从天文学到游戏开发的各大领域。 就业网站 eFinancialCareers 报告称，从 2015 年第一季度和 2018 年，提及 Python 的列表增加了近四倍。 Python 在 2014 年已经是美国大学最受欢迎的入门语言，但它的教学通常仅限于那些研究科学，技术，工程和数学的人。现在有 40％ 的美国学校提供此类课程，高于 2013 年的 10％。大约三分之二的 10 到 12 岁学生都有 Code.org 网站的帐户。也许充满自动化工作的未来感到不安，90％ 的美国父母都希望自己的孩子学习计算机科学。 van Rossum 虽然为此感到高兴，但发现终身仁慈独裁者的监督角色越来越难以忍受。他担心自己成为某种偶像，就像布莱恩试图赶走门徒一样，他决定辞职，让 Python 社区自我管理。 Python 会是我们的未来吗？与其他编程语言比起来，Python 并不完美。其他语言具有更高的处理效率和专业能力，如，C 和 C++ 使用户可以更好地控制计算机处理器；Java 非常适合构建大型复杂应用程序； JavaScript 是通过 Web 浏览器访问应用程序的首选语言。 相比之下，Python 的优势就是：语法简单，易于学习，它强大的第三方软件包使它成为一种优秀的通用语言。 经济学人在文中写道，Python 为人工智能的发展做出了杰出贡献，也给我们的生活带来了便利，如，营销人员可以使用该语言建立衡量活动有效性的统计模型；大学讲师可以检查他们是否正确分配成绩；即使是“经济学人”的记者，在网上搜索数据，通常也会使用用 Python 编写的程序来实现这一目标。 Python 的热度能够持续多久，是大家现在比较关心的一个问题。对此，经济学人表示：随着我们时代的变革和发展，每个时期都会出现一门主导的语言，随之就会有另一门语言褪去主角光环。没有一门编程语言会成为人们的唯一追求。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程—— 逻辑运算符]]></title>
      <url>%2F2018%2F07%2F26%2Fpython-rumenjiaocheng-luojiyunsuanfu%2F</url>
      <content type="text"><![CDATA[逻辑运算符逻辑运算符包括“与”、“或”、“非”。 假设a = 6，b = 66。 and 与：x and y，如果x为假（False），那么返回假，否则返回 y 的值。 如：a and b，返回b的值 66。 or 或：x or y，如果x为真（True),那么返回 x 的值，否则返回 y 的值。如：a or b，返回a的值 6。 not 非：not x，如果x为假（False），则返回真（True）；如果x为真（True），则返回假（False）。即取反。如：not a，返回 False。 练一练a = 8 b = 88 c = 0 # and运算符 print(True and True) print(True and False) print(False and True) print(False and False) # or运算符 print(True or True) print(True or False) print(False or True) print(False or False) # not运算符 print(not True) print(not False) print(a and b) print(a or b) print(b and c) print(b or c) print(not a) print(not c) 将上面代码保存为 logicalOperator.py，在IDLE中运行结果如下： ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python 入门教程——关系运算符和赋值运算符]]></title>
      <url>%2F2018%2F07%2F26%2Fpython-rumenjiaochengguanxiyunsuanfuhefuzhiyunsuanfu%2F</url>
      <content type="text"><![CDATA[关系运算符关系运算符，顾名思义是用来比较两个值的关系的运算符。 ==：比较两个值是否相等。 如：2 == 2，返回结果 True，即相等；2 == 3，返回结果 False，即不相等。 !=：比较两个值是否不相等。 如：2 != 3，返回结果 True，即两值不相等。 ：大于。 如：5 &gt; 3，返回结果 True，即5大于3。 &lt;：小于。 如：3 &lt; 8，返回结果 True，即3小于8。 =：大于等于。 &lt;=：小于等于。 练一练a = 3 b = 5 # == print(a == b) # False # != print(a != b) # True # &gt; print(a &gt; b) # False # &lt; print(a &lt; b) # True 将上面代码保存为 relaOperator.py，在IDLE中运行结果如下： 赋值运算符假设变量a = 9，b = 4： =：最简单的赋值运算符。 c = a + b 表示将 a + b 的运算结果赋值给c。 +=：加法赋值运算符。 c += a表示 c = c + a。 -=：减法赋值运算符。 c -= a表示 c = c - a。 /=：除法赋值运算符。 c /= a表示 c = c / a。 =：乘法赋值运算符。 c = a表示 c = c * a。 //=：整除赋值运算符。 c //= a表示 c = c // a。 %=：取模赋值运算符。 c %= a表示 c = c % a。 _=：幂赋值运算符。 c _= a表示 c = c **__ a。 练一练需要注意，c的值在不断变化。 a = 13 b = 4 c = 0 # = c = a + b # 此时，c的值为17 # += c += a print(c) # -= c -= a print(c) # /= c /= a print(c) # *= c *= a print(c) # //= c //= a print(c) # %= c %= a print(c) # **= c **= a print(c) 将上述代码保存到 assignOperators.py，在IDLE中运行结果如下： ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python入门教程——算术运算符]]></title>
      <url>%2F2018%2F07%2F16%2Fpythonrumenjiaochengsuanshuyunsuanfu%2F</url>
      <content type="text"><![CDATA[Python运算符用来操作变量（主要是数值型）。如，3 - 2 = 1，‘-’即为运算符， 3 和 2 被称为操作数。 Python运算符 算术运算符 关系运算符 赋值运算符 逻辑运算符 身份运算符 成员运算符 位运算符 算术运算符 +：加法操作，两个数值相加。 如：2 + 3 = 5。 -：减法操作，两个数值相减。 如：5 - 4 = 1。 ：乘法操作，两个数值相乘。 如：3 4 = 12。 /：除法操作，两个数值相除。 如：9 / 3 = 3。 %：取模/取余，求除法的余数。 如：10 % 3 = 1。 //：整除，求商的整数部分。 如：11 // 2 = 5。 ：幂运算，返回x的y次幂。 如：2 3 = 8。 练一练# **： 指数运算符 print(2**3) # 8 # %：取模/取余数 print(17%5) # 2 # //：整除/商数取整 print(17//5) # 3 # /：除法 print(17/5) # 3.4 # *：乘法 print(2*3) # 6 # -：减法 print(5-2) # 3 # +：加法 print(5+2) # 7 # 数学操作符的操作顺序（优先级）：** &gt;( * // / % )&gt; + - # () 可以改变默认的优先级 print(2**(3*2)) # 64 将上面代码保存到文件： mathOperator.py 中，执行结果如下 -]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python入门教程——变量、表达式、赋值语句]]></title>
      <url>%2F2018%2F07%2F15%2Fpythonrumenjiaochengbianliangbiaodashifuzhiyuju%2F</url>
      <content type="text"><![CDATA[几个基本概念“变量”就像一个装东西的容器，其中可以存放一个值。第一次存入一个值，变量就被”初始化“。 表达式：1 + 4， a + b，a + 1。 赋值语句：包含一个变量名、一个赋值操作符（=），以及要存放的值。 如：赋值语句 name = ‘Jack Lin’，表示名为name的变量将存放一个字符串 Jack Lin 变量名取名规则与规范：1、只能是一个词。 错误示例：my name，正确示例：my_name。 2、只能包含字母、数字和下划线。 3、不能以数字开头。 4、变量名区分大小写。 如 name 与 Name、nAme 等不同。 5、尽量使用具有描述性的名字。 6、取名风格尽量一致，建议使用驼峰式命名，如 myName。 练一练mathScore = 78 # 数学成绩78分 artScore = 88 # 美术成绩88分 musicScore = 95 # 音乐成绩95分 totalScore = mathScore + artScore + musicScore # 求三者总分 print(totalScore) # 打印输出总分 将上面代码保存到一个Python文件中，用IDLE打开并运行。IDLE打开文件方式：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python入门教程——使用IDLE运行Python程序]]></title>
      <url>%2F2018%2F07%2F13%2Fpython-ru-men-jiao-cheng-shi-yong-idle-yun-xing-python-cheng-xu%2F</url>
      <content type="text"><![CDATA[概述：如何保存python文件，如何运行python文件（程序） IDLE 的使用之前的教程已经讲过，这里不再赘述。直入主题！ IDLE 新建 Python 文件打开 IDLE 后，点击左上角 File，然后点击第一项 New File，即可创建python文件。或者直接使用快捷键 Ctrl + N 快速创建。 在创建的文件中写 Python 代码 保存文件直接使用快捷键 Ctrl + S 即可快速保存。也可以点击窗口左上角 File，然后点击 Save 完成保存。 取个文件名，保存成功！ 运行保存好的 Python 文件（程序）直接在 IDLE 中运行 Python 程序。点击窗口上方 Run，然后点击 Run Module 即可运行程序。亦可通过快捷键 F5 快速运行。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python入门教程——开始之前]]></title>
      <url>%2F2018%2F07%2F11%2Fpythonrumenjiaocheng-kaishizhiqian%2F</url>
      <content type="text"><![CDATA[开始学习Python之前，先学习一些常识。 什么是编程？编程即编写程序，用程序设计语言写个程序来简化工作、方便人类。如小马哥写了个QQ方便天各一方的人无障碍交流。写个QQ软件就是编程。 还有一种通俗的解释：编程就是输入指令来让计算机执行。 什么是程序设计语言？谈谈我个人理解： 理解一：好比汉语、英语，是人与人交流的语言；计算机程序设计语言或者我们叫的编程语言，则是人和计算机交流的语言。 理解二：程序设计语言就像一种规范。一方面规定了计算机如何使用这门语言；另一方面规定了人应该如何使用这门语言。 什么是Python？Python 指的是 Python 编程语言，以及 Python 解释器软件（读取用Python编程语言编写的源代码，并执行其中的指令）。 我们要学些什么？Python 编程语言官方文档上包含了许许多多的内容，除了最基本的内容，还包含了很多第三方库。本教程不可能囊括所有，只取其适合新手入门的内容。 主要如下： 基本数据类型 运算符 条件控制 循环语句 函数 启动 IDLEPython解释器是运行Python程序的软件，而IDLE（交互式开发与学习环境）则是输入程序的地方。 Win 10系统启动 IDLE： 直接搜索框搜索“IDLE”，点击搜索结果中的 IDLE 选项即可进入 进入后窗口如下： 可以动手在窗口上 &gt;&gt;> 光标闪动处输入 “print(‘Hello World!’)” ，然后按下回车，看看发生了什么？ 到此，恭喜你，你已经写出了第一个Python程序，虽然它很简单。 后续不断更新中… —敬请期待…]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python入门教程——下载安装Python 3.7.0]]></title>
      <url>%2F2018%2F07%2F10%2Fpythonrumenjiaocheng-xiazaianzhuangpython-3-7-0%2F</url>
      <content type="text"><![CDATA[学习Python第一步：安装好Python。本文只介绍Windows 10系统下的安装。 第一步：下载前往 https://www.python.org 进行下载 第二步：安装双击运行下载好的 python-3.7.0.exe 文件 结束：安装完成 打开命令行查看是否安装成功。成功如下： 注意：如果上述第二步中未勾上 “Add Python 3.7 to PATH”，那么命令行提示 “’python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。”]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo博客使用系列（六）——将博客部署到codingpages]]></title>
      <url>%2F2017%2F02%2F05%2Fhexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E5%B0%86%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0codingpages%2F</url>
      <content type="text"><![CDATA[step 1注册coding账户。进入自己的账户–&gt;项目，如下图操作，创建项目。 step 2在Coding的个人主页的账户中，进入SSH公钥。添加你的公钥，如果你之前生成过，公钥在C:\Users\你的用户名.ssh\id_rsa.pub。复制里面的内容在SSH-RSA公钥内容中即可。如下图操作。在网站根目录下打开git bash here，输入 1ssh -T git@git.coding.net 进行测试，如果显示如下则SSH配置成功： 1Hello ...! You've conected to Coding.net by SSH successfully! step3修改网站根目录下的配置文件_config.yml，找到deploy的设置处，改为如下： deploy: type: git repo: github: https://github.com/Javaclear/Javaclear.github.io.git coding: https://git.coding.net/yanhuangshi/yanhuangshi.git branch: master #注意要改成你的项目地址。 step4在git bash here窗口输入下列代码： hexo g -d step5进入自己的项目，选择pages服务，开启服务。如下图操作。 至此，成功部署到coding上，再也不用担心GitHub被墙导致网站无法访问的问题。该方法和将博客直接部署到码云page有异曲同工之妙。 本文参考：http://www.jeyzhang.com/blog-on-gitcafe-with-dns-settings.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（五）——NexT主题个性化设置]]></title>
      <url>%2F2017%2F02%2F05%2FHexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94NexT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[提前说明： 假设网站的根目录为D:/Hexo/，也称为 站点目录站点配置文件 是指网站目录下的_config.yml文件，即D:/Hexo/_config.yml主题配置文件 是指网站目录下对应的主题文件夹下的_config.yml文件，即D:/Hexo/themes/next/_config.yml.下面的功能设置完成后，记得1hexo g -d 以完成网站的生成与部署。————————————————————————————————————————— 添加分类、标签云、关于等页面以添加分类页面为例，在站点目录下，打开git bash，输入1hexo new page "categories" 之后在站点目录下的source文件夹下，会新增一个categories的文件夹，里面有一个index.md文件，打开如下：12345title: categoriesdate: 2015-12-04 15:37:22type: "categories"comments: false--- 其中，comments可以设置为false，含义是打开分类页面，评论插件不显示；如要显示则改为true。 tags, about页面的创建类似，输入12hexo new page "tags"hexo new page "about" 添加站内搜索功能NexT支持Swiftype插件以实现站内搜索功能。Step 1: 注册SwiftypeStep 2: 创建一个新的搜索引擎 (点击 Create an engine，按要求创建即可)Step 3: 点击新建的搜索引擎，按如下点击 INSTALL SEARCH然后复制下面蓝色底的字串Step 4: 编辑站点配置文件，添加如下内容12# Swiftype Search Keyswiftype_key: xxxxxxxxx(粘贴以上复制的内容) 设置右侧栏头像编辑站点配置文件，添加如下内容：1avatar: your avatar url 其中，your avatar url 可以是(1) 完整的互联网URL，你可以先将设置的头像图片放到图床上；(2) 本地地址：如 /upload/image/avatar.png (你需要将 avatar.png 文件放在/站点目录/source/upload/image/ 里面)。 设置favicon图标Step 1:首先要有一个常见格式名(如.jpg, .png等)的图片作为备选favicon，选择一个favicon制作网站完成制作，例如比特虫是一个免费的在线制作ico图标网站。Step 2:将==favicon.ico==文件放在网站根目录下的source文件夹内即可。刷新网站，就可以看到效果了。 添加社交链接编辑站点配置文件，添加：1234567social: github: https://github.com/your-user-name twitter: https://twitter.com/your-user-name weibo: http://weibo.com/your-user-name douban: http://douban.com/people/your-user-name zhihu: http://www.zhihu.com/people/your-user-name # 等等 可根据自身需要自行删减。 添加友情链接以添加github官网 为友情链接为例编辑站点配置文件，添加如下内容12345# titlelinks_title: Links# linkslinks: Github: https://www.github.io 其中，links_title为友情链接名称。 添加评论区支持Disqus和多说两种评论样式。建议中文网站选择多说，英文网站选择Disqus。下面以Disqus为例说明。Step 1: 注册DisqusStep 2: 登陆后进入到Settings，点击Add Disqus To Site，然后点击页面的右上角的Install on Your SiteStep 3: 复制你的shortnameStep 4: 编辑站点配置文件，添加1disqus_shortname: your disqus shortname 这样你的所有文章及页面下面，会自动加载Disqus的评论插件。如果在分类、标签云等页面，不想显示评论区，可以打开这个page文件夹下的md文件，添加1comments: false 首页文章以摘要形式显示最简单的方式是：打开主题配置文件，找到如下位置，修改123auto_excerpt: enable: true length: 150 其中length代表显示摘要的截取字符长度。 设置首页文章显示篇数Step 1: 安装相关插件输入如下命令123npm install --save hexo-generator-indexnpm install --save hexo-generator-archivenpm install --save hexo-generator-tag Step 2:安装完插件后，在站点配置文件中，添加如下内容12345678910index_generator: per_page: 5archive_generator: per_page: 20 yearly: true monthly: truetag_generator: per_page: 10 其中per_page字段是你希望设定的显示篇数。index, archive及tag开头分表代表主页，归档页面和标签页面。 设置404公益页面在站点目录的source文件夹下，新建404.html文件，将下面的代码复制进去保存即可。1234567891011121314&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;404 - arao'blog&lt;/title&gt; &lt;meta name="description" content="404错误，页面不存在！"&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript" src="http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 显示效果如下 本文转载自：http://www.jeyzhang.com/next-theme-personal-settings.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（四）——文章里嵌入音乐播放器]]></title>
      <url>%2F2017%2F02%2F04%2FHexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E7%AB%A0%E9%87%8C%E5%B5%8C%E5%85%A5%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%2F</url>
      <content type="text"><![CDATA[内嵌播放器打开网页版网易云音乐。选择自己喜欢的音乐或歌单，点开歌曲名货歌单名，点击生成外链播放器，复制html代码，将html代码无需任何修改放入markdown文章里就可以了。可以取消自动播放。效果如下：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（三）——更换博客主题]]></title>
      <url>%2F2017%2F02%2F04%2FHexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%2F</url>
      <content type="text"><![CDATA[==获取主题==1、选择自己喜欢的主题进入Hexo官网 https://hexo.io/themes/ 选择： 2、点击主题名进行下载 3、将下载好的主题解压到 D:\Blog\themes 。==配置主题==1、打开 D:\Blog_config.yml ,修改theme 为刚刚解压的主题文件夹名称。==注意：theme: 后有一个英文空格。==2、在\Blog下运行Git Bash Here命令窗口，执行下面代码：12hexo generatehexo deploy OK！主题更换成功啦！赶紧进入自己的网站看看效果吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（二）——常用命令]]></title>
      <url>%2F2017%2F02%2F04%2FHexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[==注意：== 以下指令理论上可以在电脑自带cmd窗口执行，但可能会出错，最好在 Git Bash Here 窗口执行。使用过程中遇到任何问题欢迎留言和我交流。当然，个人建议大家有问题先上网查找答案，一般可以找到。 一、新建一个网站1$ hexo init [folder] ==folder==指你新建网站在你电脑上存放的文件夹，默认在目前的文件夹建立网站。 二、新建一篇文章1$ hexo new [layout] &lt;title&gt; layout：布局，可以不设置，默认使用 _config.yml 中的 ==defaultlayout==参数代替。注意：如果标题包含空格，请用引号括起来。 ==新建的文章存放在你的网站文件夹根目录下的/source/posts里面。== 三、生成静态文件1$ hexo generate #可以简写为 hexo g 四、启动服务1$ hexo server 启动服务器后，默认访问 ==http://localhost:4000/== 进行网站预览。==可通过 hexo new port 重设端口，将:4000改为其他值，如5885等。== 五、部署网站1$ hexo deploy #可简写为 hexo d ;也可以与 generate连用，合写为 hexo g -d 六、其他指令1、渲染文件1$ hexo render &lt;file1&gt; [file2] ... 2、从其他博客系统迁移内容1$ hexo migrate &lt;type&gt; 参考：hexo迁移内容 3、清除缓存文件 (db.json) 和已生成的静态文件 (public)1$ hexo clean 4、列出网站资料1$ hexo list &lt;type&gt; 5、显示 Hexo 版本1$ hexo version 七、选项1、安全模式1$ hexo --safe 安装新插件遇到问题时，可尝试以安全模式重新执行。 2、调试模式1$ hexo --debug 3、简洁模式1$ hexo silent 隐藏终端信息。 4、自定义配置文件路径1$ hexo --config custom.yml #执行后将不再使用 _config.yml 5、显示 source/_drafts 文件夹中的草稿文章1$ hexo --draft 6、自定义当前工作目录（Current working directory，CWD）的路径1$ hexo --cwd /path/to/cwd ==**本文主要参考hexo命令==]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（三）——更换博客主题]]></title>
      <url>%2F2017%2F01%2F27%2Fhexobokeshiyongxiliesangenghuanbokezhuti%2F</url>
      <content type="text"><![CDATA[获取主题1、选择自己喜欢的主题 进入Hexo官网 https://hexo.io/themes/ 选择： 2、点击主题名进行下载 3、将下载好的主题解压到 D:\Blog\themes 。 配置主题1、打开 D:\Blog_config.yml ,修改theme 为刚刚解压的主题文件夹名称。注意：theme: 后有一个英文空格。 2、在\Blog下运行Git Bash Here命令窗口，执行下面代码： hexo generate hexo deploy OK！主题更换成功啦！赶紧进入自己的网站看看效果吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（二）——常用命令]]></title>
      <url>%2F2017%2F01%2F26%2F136%2F</url>
      <content type="text"><![CDATA[注意： 以下指令理论上可以在电脑自带cmd窗口执行，但可能会出错，最好在 Git Bash Here 窗口执行。使用过程中遇到任何问题欢迎留言和我交流。当然，个人建议大家有问题先上网查找答案，一般可以找到。 一、新建一个网站$ hexo init [folder] folder：指你新建网站在你电脑上存放的文件夹，默认在目前的文件夹建立网站。 二、新建一篇文章$ hexo new [layout] &lt;title&gt; layout：布局，可以不设置，默认使用 _config.yml 中的 default_layout 参数代替。注意：如果标题包含空格，请用引号括起来。 新建的文章存放在你的网站文件夹根目录下的/source/_posts里面。 三、生成静态文件$ hexo generate #可以简写为 hexo g 四、启动服务$ hexo server 启动服务器后，默认访问 http://localhost:4000/ 进行网站预览。 可通过 hexo new port 重设端口，将:4000改为其他值，如5885等。 五、部署网站$ hexo deploy #可简写为 hexo d ;也可以与 generate连用，合写为 hexo g -d 六、其他指令1、渲染文件$ hexo render &lt;file1&gt; [file2] ... 2、从其他博客系统迁移内容$ hexo migrate &lt;type&gt; 参考：hexo迁移内容 3、清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo clean 4、列出网站资料$ hexo list &lt;type&gt; 5、显示 Hexo 版本$ hexo version 七、选项1、安全模式$ hexo --safe 安装新插件遇到问题时，可尝试以安全模式重新执行。 2、调试模式$ hexo --debug 3、简洁模式$ hexo silent 隐藏终端信息。 4、自定义配置文件路径$ hexo --config custom.yml #执行后将不再使用 _config.yml 5、显示 source/_drafts 文件夹中的草稿文章$ hexo --draft 6、自定义当前工作目录（Current working directory，CWD）的路径$ hexo --cwd /path/to/cwd 本文主要参考hexo命令]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（一）——新建文章并发布]]></title>
      <url>%2F2017%2F01%2F25%2FHexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%2F</url>
      <content type="text"><![CDATA[* 新建文章的方法1、进入你的博客目录，在 /source/_posts 文件夹下直接建立一个.md文件。 2、进入你的博客目录，右键选择 Git Bash Here 进入命令窗口，输入下面代码:1hexo new "新建文章名称" #新建文章 此时，在方法1所述的文件夹里便有了 新建文章名称.md 文件。 * 发布新建文章在该博客项目文件夹下运行 Git Bash Here 命令窗口，依次输入如下代码：12hexo generate #生成更改hexo deploy #将生成的更改部署到码云或者GitHub上 ==注意== 1、部署到GitHub时，可能因为网速、被墙等原因，需要多次运行 hexo deploy ；有时候可以运行 hexo clean 后在运行上述代码。2、.md文件不要用记事本打开，建议使用具有markdown语法的程序打开，比如：subline text、notepad++等。也可以使用在线markdown编辑器，比如：==小书匠== 其他问题欢迎在评论区留言！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用教程（引子）————如何优化]]></title>
      <url>%2F2017%2F01%2F25%2FHexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E5%BC%95%E5%AD%90%EF%BC%89%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%2F</url>
      <content type="text"><![CDATA[==**优化文章==1、使用markdown编辑器编写文章时，使用markdown语法优化。自行百度markdown语法。2、修改网站根目录下scaffolds（模版）的文件，可编辑选项：layout（布局），title（标题），date（文件建立日期）。 ==**优化主题====*== 网站增加插件1、增加访问量统计2、增加站内搜索3、增加打赏功能4、添加返回顶部功能 ==*== 局部缓存如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。 本功能借鉴于 Ruby on Rails，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。 它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：123&lt;%- fragment_cache('header', function()&#123; return '&lt;header&gt;&lt;/header&gt;';&#125;); 如果您使用局部模板的话，可以更简单：1&lt;%- partial('header', &#123;&#125;, &#123;cache: true&#125;); 但是，如果您开启了 relative_link 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。 具体优化教程随后奉上！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用系列（一）——新建文章并发布]]></title>
      <url>%2F2017%2F01%2F25%2Fhexobokeshiyongxilieyixinjianwenzhangbingfabu%2F</url>
      <content type="text"><![CDATA[新建文章的方法1、进入你的博客目录，在 /source/_posts 文件夹下直接建立一个.md文件。2、进入你的博客目录，右键选择 Git Bash Here 进入命令窗口，输入下面代码:hexo new &quot;新建文章名称&quot; 此时，在方法1所述的文件夹里便有了 新建文章名称.md 文件。 发布新建文章在该博客项目文件夹下运行 Git Bash Here 命令窗口，依次输入如下代码： hexo generate hexo deploy 注意： 1、部署到GitHub时，可能因为网速、被墙等原因，需要多次运行 hexo deploy ；有时候可以运行 hexo clean 后在运行上述代码。2、.md文件不要用记事本打开，建议使用具有markdown语法的程序打开，比如：subline text、notepad++等。也可以使用在线markdown编辑器，比如：小书匠其他问题欢迎在评论区留言！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo博客使用教程（引子）———如何优化]]></title>
      <url>%2F2017%2F01%2F25%2Fhexobokeshiyongjiaochengyinziruheyouhua%2F</url>
      <content type="text"><![CDATA[优化文章1、使用markdown编辑器编写文章时，使用markdown语法优化。自行百度markdown语法。 2、修改网站根目录下scaffolds（模版）的文件，可编辑选项：layout（布局），title（标题），date（文件建立日期）。 优化主题网站增加插件： 增加访问量统计 增加站内搜索 增加打赏功能 添加返回顶部功能 局部缓存：如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。 本功能借鉴于 Ruby on Rails，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。 它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说： &lt;%- fragment_cache(&apos;header&apos;, function(){ return &apos;&lt;header&gt;&lt;/header&gt;&apos;; }); 如果您使用局部模板的话，可以更简单： &lt;%- partial(&apos;header&apos;, {}, {cache: true}); 但是，如果您开启了 relative_link 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。 具体优化教程随后奉上！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[搭建个人免费博客：利用Hexo在码云上部署博客]]></title>
      <url>%2F2017%2F01%2F25%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%9A%E5%88%A9%E7%94%A8Hexo%E5%9C%A8%E7%A0%81%E4%BA%91%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[写在前面为什么要搭建专属博客？每个人有每个人想法。很显然，反正你看到了这篇文章就说明你有一些想法。 不多赘述，开始搭建。 注意：本篇针对win7 x64 工具介绍大家想了解工具的，看官方文档。 码云pages，参考 https://git.oschina.net/ Hexo：https://hexo.io/zh-cn/ 准备工作1、安装node.js参考 http://www.runoob.com/nodejs/nodejs-install-setup.html 2、安装Git参考 http://www.runoob.com/git/git-install-setup.html 3、安装Hexo安装好node.js、git后，打开cmd窗口（开始—-&gt;搜索框输入“cmd”，回车），输入下面代码：1npm install -g hexo-cli 安装完成后输入1hexo 显示如下图，则安装成功！关于Hexo的更多使用，参考官方文档：https://hexo.io/zh-cn/docs/ 正式搭建博客1、本地运行Hexo在你喜欢的硬盘下建一个项目文件夹（名称随你喜欢，Blog、Hexo等等都可以），在该文件夹下，按鼠标右键出现如下图，选择Git Bash Here，进入如下窗口：在窗口中输入：1npm install 再输入：1hexo generate 然后在该文件夹下一般会出现如下文件：有的电脑上项目文件夹下没有 .deploy_git、public和db，没事。到了这里，你已经建好了一个博客，不过现在只能在本地运行。本地运行预览方法如下（以后都可以通过以下代码预览）：12npm installhexo server 在浏览器中输入 http://localhost:4000 就可以看到刚刚搭建好的博客了。如图： 2、将搭建好的博客部署到码云pages 首先在 https://git.oschina.net/ 上注册一个账号。登陆后，点击页面右上角加号，选新建项目，填写如下信息，创建。如下图：创建完成后，得到项目的HTTPS，复制。在原先打开的git bash here 窗口依次输入如下代码：12hexo generatenpm install hexo-deployer-git --save 然后打开项目根目录下的_config.yml 文件，修改最后的deploy属性，修改后如下注意：repo的值是之前复制的码云项目上的HTTPS。修改完，在git bash here 窗口输入下面代码：12hexo generatehexo deploy 然后会弹出一个对话框，输入你的码云账号密码，账号最好填写你注册时用到的邮箱。到此，部署完成。进入码云你创建的项目，看是否已经有类似下面的文件，如果有，那么恭喜你部署成功啦！然后，启动码云的pages功能，如图：访问链接即进入你的博客：至此，专属你的博客搭建成功了，你的专属域名：https://yourusername.oschina.io 。希望本文能给你带来帮助，如有疑惑欢迎联系我！ 希望本文能给你带来帮助，如有疑惑欢迎联系我！关于使用hexo+GitHub搭建静态博客，网上有很多文章，大家自行百度，结合本文基本能够搭建成功。关于C语言的学习请参考 https://yuanfangdetianye.oschina.io]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[搭建个人免费博客：利用Hexo在码云上部署博客]]></title>
      <url>%2F2017%2F01%2F25%2Fda-jian-ge-ren-mian-fei-bo-ke-li-yong-hexo-zai-ma-yun-shang-bu-shu-bo-ke%2F</url>
      <content type="text"><![CDATA[写在前面 为什么要搭建专属博客？每个人有每个人想法。 注意：本篇针对win7 x64 。不多赘述，开始搭建。 工具介绍大家想了解工具的，看官方文档。 1、码云pages，参考 https://git.oschina.net/ 2、Hexo：https://hexo.io/zh-cn/ 准备工作1、安装node.js参考 http://www.runoob.com/nodejs/nodejs-install-setup.html 2、安装Git参考 http://www.runoob.com/git/git-install-setup.html 3、安装Hexo安装好node.js、git后，打开cmd窗口（开始—-&gt;搜索框输入“cmd”，回车），输入下面代码： npm install -g hexo-cli 安装完成后输入 hexo 显示如下图，则安装成功！ 关于Hexo的更多使用，参考官方文档：https://hexo.io/zh-cn/docs/ 正式搭建博客1、本地运行Hexo在你喜欢的硬盘下建一个项目文件夹（名称随你喜欢，Blog、Hexo等等都可以），在该文件夹下，按鼠标右键出现如下图， 选择Git Bash Here，进入如下窗口： 在窗口中输入： npm install 再输入： hexo generate 然后在该文件夹下一般会出现如下文件： 有的电脑上项目文件夹下没有 .deploy_git、public和db，没事。 到了这里，你已经建好了一个博客，不过现在只能在本地运行。本地运行预览方法如下（以后都可以通过以下代码预览）： npm install hexo server 在浏览器中输入 http://localhost:4000 就可以看到刚刚搭建好的博客了。如图： 2、将搭建好的博客部署到码云pages首先在 https://git.oschina.net/ 上注册一个账号。 登陆后，点击页面右上角加号，选新建项目，填写如下信息，创建。如下图： 创建完成后，得到项目的HTTPS，复制。 在原先打开的git bash here 窗口依次输入如下代码： hexo generate npm install hexo-deployer-git --save 然后打开项目根目录下的_config.yml 文件，修改最后的deploy属性，修改后如下 注意：repo的值是之前复制的码云项目上的HTTPS。 修改完，在git bash here 窗口输入下面代码： hexo generate hexo deploy 然后会弹出一个对话框，输入你的码云账号密码，账号最好填写你注册时用到的邮箱。 到此，部署完成。进入码云你创建的项目，看是否已经有类似下面的文件，如果有，那么恭喜你部署成功啦！ 然后，启动码云的pages功能，如图： 访问链接即进入你的博客： 至此，专属你的博客搭建成功了，你的专属域名：https://yourusername.oschina.io 。 希望本文能给你带来帮助，如有疑惑欢迎联系我！关于使用hexo+GitHub搭建静态博客，网上有很多文章，大家自行百度，结合本文基本能够搭建成功。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[建立自己的专属博客]]></title>
      <url>%2F2017%2F01%2F24%2F1%2F</url>
      <content type="text"><![CDATA[费了许多周折终于把自己的博客建立起来了。为什么要建一个专属自己的博客？一显得高大上；二便于督促自己学习，有这么一个博客自己便会不断去充实自己的博客，也就会不断学习；三是作为自己在互联网世界的标签。 等整理好之后，我会把建立这个博客的方法步骤写出来，供大家参考。]]></content>
    </entry>

    
  
  
</search>
